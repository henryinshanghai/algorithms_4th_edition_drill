# 347

---
题设与要求：
//给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

// 示例 1:
//
// 输入: nums = [1,1,1,2,2,3], k = 2
//输出: [1,2]

题设：你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
要求：
    1 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。
    2 题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。
    3 你可以按任意顺序返回答案。

分析 与 手段：
    难点1：如何获取到元素出现的频率？
    手段：可以使用哈希表来实现对数组元素的计数

    难点2：如果所有元素出现的频率/次数组成了一个数组，如何获取数组中的k个最大值？
    手段：这显然可以使用一个优先队列来实现

思路SOP：
    1 统计数组中各个元素出现的次数；
    2 准备一个最小堆（最大的k个数是要用最大堆吗？不是的，应该用最小堆），并指定堆中元素的大小比较规则
    3 遍历统计次数的数组，使用最小堆得到出现频率最高的k个数组元素；
    4 遍历队列中的元素，并添加到数组中

代码：
