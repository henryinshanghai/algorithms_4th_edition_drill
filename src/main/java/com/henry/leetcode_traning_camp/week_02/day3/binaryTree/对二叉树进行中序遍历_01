# 94
题设与要求：
//给定一个二叉树，返回它的中序 遍历。

// 示例:
//
// 输入: [1,null,2,3]
//   1
//    \
//     2
//    /
//   3
//
//输出: [1,3,2]

提高：
// 进阶: 递归算法很简单，你可以通过迭代算法完成吗？

分析难点 & 提出解决手段：
    难点：如何以左子树 - 根节点 - 右子树的顺序对二叉树中的节点进行遍历？
    手段：准备一个循环，在循环中不断使用左子节点来更新当前节点，直到当前节点为null

思路1：递归；
代码：
List<Integer> res = new ArrayList<>();
    // 递归方法的作用：以中序遍历的规则来遍历二叉树中的所有节点，并把当前遍历的节点添加到列表中
    public List<Integer> inorderTraversal(TreeNode root) {
        // 1 跳出递归调用的条件
        if(root == null) return res;

        // 2 本级递归要完成的事情
        inorderTraversal(root.left);
        res.add(root.val);
        inorderTraversal(root.right);

        return res;
    }
expr: 在递归函数中，不断更新某个变量时，需要把这个变量的声明放在函数体之外；

思路2：不使用递归，使用迭代 + 手动维护栈的方式；

模板：
    Deque stack = xxx;
    List res = xxx;

    while(root != null || !stack.isEmpty()){
        while(root != null){
            stack.push(root);
            root = root.left;
        }

        root = stack.pop();
        res.add(root.val);

        root = root.right;
    }

APIs说明：
任务：双栈队列如何当作栈来使用？
特征：后进者先出；
手段：在双端队列的头部进行添加与删除操作；
APIs对应表：
Stack Method 	Equivalent Deque Method
push(e) 	addFirst(e)
pop() 	removeFirst()
peek() 	peekFirst()



