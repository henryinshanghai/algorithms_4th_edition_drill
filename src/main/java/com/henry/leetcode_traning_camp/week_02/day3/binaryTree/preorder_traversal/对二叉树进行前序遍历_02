# 144
题设与要求：
//给定一个二叉树，返回它的 前序 遍历。

// 示例:
//
// 输入: [1,null,2,3]
//   1
//    \
//     2
//    /
//   3
//
//输出: [1,2,3]

分析难点 & 提出解决方案：
难点：如何以特定的次序访问树中的节点？
解决手段1：递归；
解决手段2：
    前序遍历的次序：根节点 - 左子树 - 右子树；
    使用一个双端队列来实现这样的次序；
        stack.add(root); // 在双端队列的尾部添加一个元素
        TreeNode node = stack.pollLast(); // 从双端队列的尾部删除一个元素
    ---
    Comparison of Queue and Deque methods
    Queue Method 	Equivalent Deque Method
    add(e) 	        addLast(e)

    【Last Element (Tail)】
    removeLast() 	pollLast()

    SOP：
        1 把根节点添加到双端队列的尾部；
        2 定义一个循环：
            2-1 从队列尾部删除根节点；
            2-2 把删除得到的节点添加到output对象中（也是一个deque对象）
            2-3 把右子节点添加到队列尾部；
            2-4 把左子节点添加到队列尾部； // 由于后添加的左子节点，所以删除尾部节点时会先得到左子节点 Thus,output中存储的节点次序是正确的

