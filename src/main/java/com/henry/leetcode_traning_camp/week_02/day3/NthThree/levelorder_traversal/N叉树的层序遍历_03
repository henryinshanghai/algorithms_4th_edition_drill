# 429

题设与条件：
//给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。

分析难点：
    1 什么叫做层序遍历？
    一层一层地从左向右遍历
    2 如何实现以层序遍历规则访问树中的节点？
    手段：循环 + 特殊的数据结构

特征：由于一层中的多个节点直接没有直接的关系，所以需要借助一个容器来记录当前层的节点集合；
基本思路：
    1 入队根节点；
    2 定义一个循环，在循环中：
        1 遍历队列中当前的每一个元素（aka 当前层的所有节点），从而记录下当前层所有节点的值；
        2 访问到某个元素时，把该节点的所有子节点添加到队列尾部；

SOP：
    1 准备一个deque对象与list<list>对象；
    2 把root节点入队；
    3 准备一个循环，在循环中：
        3-1 准备一个list对象，用于存储当前层所有节点的值
        3-2 遍历队列中当前的每一个节点：
            1 把节点的值添加到list中；
            2 把节点的子节点添加到队列末尾；
        3-3 把当前层的节点值集合添加到list<list>对象中
    4 返回list对象

用一个普通的队列就可以了；

------
手段2：DFS的递归实现

SOP:
    1 定义递归方法的作用；
        对“指定的二叉树”进行层序遍历，并把特定层的节点添加到特定索引的列表中

    2 确定递归函数的参数列表；
        (Node node, int level, List<List> res)

    3 确定最外层调用递归函数时应该传入的参数；
        dfs(root, 0, new LinkedList<>())

    4 递归终结条件【最简单 or 最底层的情况】
        if (root == null) return res;

    5 本级递归需要完成的事情
        5-1 // 为了存储当前层中的节点，需要在res列表中，为当前层level添加一个list元素
        5-2 把当前节点的值添加到节点所在层对应的列表中...【只考虑本级递归，剩下的事情默认是已经实现了的】
        // 2-3 对“当前节点的每一个子树”做相同的处理
        进入到下一层递归



