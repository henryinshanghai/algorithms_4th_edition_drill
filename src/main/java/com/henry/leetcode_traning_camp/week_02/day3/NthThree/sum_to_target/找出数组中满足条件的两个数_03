# 1
题设与要求：
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

===
示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

===
分析（难点） & 提出解决手段：
难点：如何计算数组中所有两个元素的组合？（不重复 & 不遗漏）

===
手段1：一个定指针anchor + 一个动指针explorer，扫描数组元素所能产生的所有组合
手段2：先对数组进行排序，然后定义两个指针left、right。通过不断更新指针位置来求出满足条件的两个数
手段3：
    准备一个哈希表，对于数组中的每一个元素x：
        先判断(target - x)是不是已经在哈希表中存在了。如果是，则找到了满足条件的两个数
        如果不存在，就把元素x添加到哈希表中

===
代码1：
    if (nums == null || nums.length == 1) return new int[]{-1, -1};

    int sum = -1;
    for (int anchor = 0; anchor < nums.length - 1; anchor++) {
        for (int explorer = anchor+1; explorer < nums.length; explorer++) {
            sum = nums[anchor] + nums[explorer];

            if (sum == target) {
                return new int[]{anchor, explorer};
            }
        }
    }

    return new int[]{-1, -1};
时间复杂度：O(N^2)

===
代码2：
Arrays.sort(nums);

    int left = 0;
    int right = nums.length - 1;

    int sum = 0;
    while (left < right) {
        sum = nums[left] + nums[right];

        if (sum == target) {
            return new int[]{left, right};
        } else if (sum < 0) {
            left++;
        } else {
            right--;
        }
    }

    return new int[]{-1, -1};
时间复杂度：O(N)

手段3：
    使用一个哈希表存储所有已经检查过的元素，避免重复的查找操作；