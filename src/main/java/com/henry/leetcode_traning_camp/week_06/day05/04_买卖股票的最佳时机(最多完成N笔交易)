# 188 在最多能够完成N次交易规则下，买卖股票的最佳时机

//给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
//
// 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

// 示例 2：
//
//
//输入：k = 2, prices = [3,2,6,5,0,3]
//输出：7
//解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
//     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3

======
题设与要求
题设：
    1 给定一个数组arr arr[i] 表示某只股票在第i天的股价；
    2 限制最多能够进行的交易次数为 k；
    3 在一次交易关闭之前，不能开启下一次交易；

要求：
    在上述规则下，从这个arr中所能赚到的最大利润；

分析难点 & 提出解决方案
难点1：如果arr是单调递增的，只需要进行一笔交易就能够获取到最大利润。其他的情况则可能需要多笔交易，如何能够正确地使用给定的k？
答：
    对k的大小进行分类讨论；
    1 如果k足够大，10天的股价，允许进行5次交易。说明压根没有交易次数的限制,则：
        直接求在arr中所能获取到的最大利润

难点2：对于限制条件“在一次交易关闭之前，不能开启下一次交易”。要如何体现这个限制呢？
答：这个会限制 当前天数的购买状态... 当讨论 dpTable 子问题之间的关系，需要列举当天购买状态的可能性时会发挥作用

思路参考：https://www.youtube.com/watch?v=ZRK5t8svQ9o
代码参考：https://www.youtube.com/watch?v=ZRK5t8svQ9o

代码：
/* 〇 对参数进行判断 */
// 对k的大小进行分类讨论
/* Ⅰ case01：k比较大的时候，相当于没有交易次数上的限制 */
/* Ⅱ case02:k比较小的时候，需要通过动态更新buy 与 sell操作来确定最终的profit */
    // 1 准备数组buy  存储执行第(i+1)次buy操作后手上的现金
    // 2 准备数组sell  存储执行第(i+1)次sell操作后手上的现金
    // 3 开始遍历每一天的股价 start the traversal
        // 如果今天(第i天)买入的话，说明xxx。则：记录 第(j+1)次buy操作后手上的现金值为xxx // 今天的买入金额为xxx
        // 如果是第一次交易，则 第(j+1)次buy操作 后手上的现金为：0 - prices[i] // 当前的股价
        // 如果不是第一次交易，则 第(j+1)次buy操作 后手上的现金为：当前手上的现金 - 当前buy股票的股价

        // 如果是今天(第i天)卖出的话，说明xxx。则记录 第(j+1)次sell操作后，手上的现金值为xxx
        // 执行第(j+1)次卖出操作后，手上的现金 = 执行第(j+1)次buy操作后手上的现金 + 当前的股价
/* Ⅲ 返回最后一次交易后手上的现金 */
















