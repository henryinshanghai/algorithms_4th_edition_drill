# 309 买卖股票的最佳时机(包含冷冻期)

给定一个整数数组，其中 第i个元素 代表了 第i天的股票价格 。

设计一个算法计算出最大利润。
在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
#1 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
#2 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。

示例:

输入: [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

======
题设与要求
题设：
    1 给定一个数组 stockValuesThroughDays, arr[i]表示某一支股票在第i天的价格；
    2 不允许同时存在多个未完成的交易 aka 买入之前，手上不能有股票；
    3 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)； note: how to deal with this restriction?

要求：
    求出题设条件下，能够赚取到的最大利润；

===
分析难点 & 提出解决方案
难点1：如何能够保证 不存在多个未完成的交易？
手段：在执行买入操作之前，确保手上已经没有股票？

难点2：如何确定自己手上有没有股票呢？
手段：只通过mih(money in hand)是无法判断的，所以可以考虑添加一个boolean类型的变量来标识 “当前手上是否有股票”

难点3：如何能够遵守 冷冻期的规则呢？
手段：在执行今天的操作(可能的操作有三种：买入、carry forward、卖出，其中只有carry forward是安全的)，
先要检查一下昨天是不是做了 “卖出”的操作，如果是，今天就只能 carry forward了

难点4：为什么要使用 DP？
答：
    1 因为当前问题的求解能够拆解成规模更小的同类问题；；
    2 当前问题的解 可以 使用规模更小的同类问题的解 递推得到；
    3 规模更下的同类问题之间的联系 可以通过题设条件 计算出来；
    4 最后，两个明显的特征：
        1 存在一个数组；
        2 要求求某种形式的最值；

参考：https://www.youtube.com/watch?v=w6xk5Po-DX0

代码：
/*
0 因为需要记录“当前是不是有持有股票”，所以 dpTable 需要是一个二维数组————第一维记录天数i、第二维记录“是否...”
1 dp[i][0] 表示的是什么意思？
    通过 这种方式， 我的mih(money in hand)
2 根据给出的题设条件来 “找出子问题之间的关联关系公式”：
    case 1: We have a stock on day i, which represent by dp[i][1]
        - I bought it today;
            dp[i - 2][0] - prices[i] // 前天清仓（no stock），今天买股票
        - I am carry forwarding(own stock);
            dp[i - 1][1] // 昨天的股票， 今天carry forward

    case 2: We have no stock on day i, represent by dp[i][0]
        - I sold it today;
            dp[i - 1][1] + prices[i] // 昨天持股，今天清仓
        - I am carry forwarding(own no stock)
            dp[i - 1][0] // 昨天清仓，今天 carry forward
 */


/* 〇 对入参进行判断 */
/* Ⅰ 准备二维数组中的两个初始值 to build up dbTable from them */
    // 1 边界条件
    // 2 准备一个 dpTable
    // 3 准备初始值
/* Ⅱ build up the dpTable following the 子问题解的递推公式  */
    // 今天没有持股
    // 今天持股了
/* Ⅲ 最后一天不再持有任何股票 全部转成现金 */