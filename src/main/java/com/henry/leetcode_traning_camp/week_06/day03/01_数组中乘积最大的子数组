# 152 找出数组中乘积最大的子数组

//给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。
//
//
//
// 示例 1:
//
// 输入: [2,3,-2,4]
//输出: 6
//解释: 子数组 [2,3] 有最大乘积 6。

======
题设与要求：
题设：
    1 给定一个包含正整数与负整数的数组；

要求：
    找出数组中的乘积最大的连续子数组，并输出乘积的值；

分析难点 & 提出解决方案
难点1：什么是连续子数组？
答：原始数组中相邻的一组元素组成的集合；

难点2：如何能够找到 乘积最大的连续子数组？
答：与 加法不同，乘法存在负负得正的情况； aka
执行 sum *= item 后， sum可能变得很大，也可能变得很小（负数）
而且 当前sum 对 下一个sum的贡献，取决于下一个item的正负与大小
所以在遍历完成数组中的每一个元素之前，我们是不可能知道 max 是多少的
方案：对于遍历的每一个item，记录当前item 乘进 sum中之后：
    1 当前的sum_max;
    2 当前的sum_min；
    3 当前的元素本身item;
记录下 current_max 与 current_min，并不断更新 final_max

代码：
    /* 〇 */
    /* Ⅰ 准备递推过程的初始变量 */
    /* Ⅱ 开始遍历数组，进行递推 */
        // 1 由于 current_max：1 会被更新； 2 在后续的计算中还会被用到； 所以在这里使用一个变量来记录下它的当前值
        // 2 记录当前 乘积最大的子数组 的乘积值
            // 三种选择：使用当前的最大值product * item、当前的最小值product * item、当前元素item
        // 3 记录下当前 乘积最小的子数组 的乘积值
        // 4 更新最大乘积值 fina_max
    /* Ⅲ 返回最大乘积值final_max */