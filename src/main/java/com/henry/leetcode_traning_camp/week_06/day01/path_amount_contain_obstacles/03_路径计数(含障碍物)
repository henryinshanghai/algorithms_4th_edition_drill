# 63 从二维矩阵得左上角到右下角的走法(矩阵中包含障碍物)

一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。
机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。
那么从左上角到右下角将会有多少条不同的路径？

网格中的障碍物和空位置分别用 1 和 0 来表示。

示例 1：
输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
输出：2

===
题设与要求：
题设：
    #1 给定一个二维数组，数组中包含0与1——0表示可以通行的空地、1表示障碍物；
    #2 机器人每次都只能向右或者向下移动一个方格；

要求：
    从左上角到右下角之间的所有路径走法有多少种？

===
分析难点 & 提出解决方案
难点：同样是DP的思路，如果需要了障碍物该如何处理障碍物的方格呢？
手段：如果是障碍物的方格，则从此方格走到最右下角方格的走法为0————所以dpTable中对应的元素直接取0
参考：https://leetcode-cn.com/problems/unique-paths-ii/solution/jian-dan-dpbi-xu-miao-dong-by-sweetiee/
甜姨的题解，一般是比较容易理解的

代码：
    /* 〇 参数判空 */
    /* Ⅰ 定义 dp 数组并初始化第 1 行和第 1 列。 */
    /* Ⅱ 根据状态转移方程 dp[i][j] = dp[i - 1][j] + dp[i][j - 1] 进行递推。 */
    /* Ⅲ 返回二维数组中满足提议要求的元素（二维数组中的其他元素都是为了能够记录DP的中间状态值）*/
