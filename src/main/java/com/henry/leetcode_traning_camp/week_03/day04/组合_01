# 77 求满足条件的组合

//给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。
//
// 示例:
//
// 输入: n = 4, k = 2
//输出:
//[
//  [2,4],
//  [3,4],
//  [2,3],
//  [1,2],
//  [1,3],
//  [1,4],
//]

---
题设与要求：
题设：从一个大小为n的集合中，构造由k个数字组成的集合；
要求：
    1 可选的范围为1-n；
    2 构造出的集合中有k个元素；
    3 所有构造出的集合都不重不漏；

分析难点：怎么能够做到不重不漏呢？
实现手段：递归 + 回溯 + DFS

怎么具体使用递归呢？
手段：把从集合中构造出组合的过程使用一棵树来描述；

为什么要回溯？回溯发生在遍历的什么地方呢？
回溯是因为当前分类下的所有组合情形都已经完成，所以从树的角度来说，需要回到上一层————这样才能遍历其他可能性。
回溯发生的时机就是：本级递归完成，aka dfs已经搜索到了树的叶子节点

为什么会使用dfs？
首先，为了找到所有满足条件的可能组合。需要完成对整棵树的遍历(构建树本身也是有技巧的)；
至于为什么是dfs而不是bfs，可能是因为dfs能够很好地使用递归的技巧

回溯的代码模板：
void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择作为起始元素的当前元素 ：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理的节点
    }
}

根据此代码模板实现代码：
    private void dfs(int n, int k, int begin, Deque<Integer> path, List<List<Integer>> res) {
        // 递归终止条件是：path 的长度等于 k
        if (path.size() == k) {
            // 把当前组合添加到res中时，需要创建一个新的对象而不能直接添加
            res.add(new ArrayList<>(path));
            // 处理完成后，直接返回 表示到了递归树的叶子节点
            return;
        }

        // 遍历可能的搜索起点 从当前元素开始遍历整个可用区间
        for (int i = begin; i <= n; i++) {
            // 向路径变量path里添加一个数
            path.addLast(i);
            // 下一轮搜索，设置的搜索起点要加 1，因为组合数理不允许出现重复的元素
            dfs(n, k, i + 1, path, res);
            // 重点理解这里：深度优先遍历有回头的过程，因此递归之前做了什么，递归之后需要做相同操作的逆向操作
            path.removeLast();
        }
    }

    在主函数中对dfs()方法的调用：
    // 调用dfs方法，实现深度优先遍历    为什么要遍历？因为题目需要列举出所有满足条件的子集合 不遍历的话就可能有遗漏
    // 参数列表：原始集合的大小，预期组合的大小，搜索组合的起点，本次递归的path，作为最终结果的res
    // 心中有树，想着你需要对当前节点做那些事？
    dfs(n, k, 1, path, res);

---
优化：
    基于k的限制，所以搜索的起点是由最大边界的（超过这个边界，搜索就是无效的了）
    这是一个非常奇技淫巧的剪枝操作 应该是想不到的














