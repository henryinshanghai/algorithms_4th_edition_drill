# 70
//假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//
// 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//
// 注意：给定 n 是一个正整数。
//
// 示例 1：
//
// 输入： 2
//输出： 2
//解释： 有两种方法可以爬到楼顶。
//1.  1 阶 + 1 阶
//2.  2 阶
//
// 示例 2：
//
// 输入： 3
//输出： 3
//解释： 有三种方法可以爬到楼顶。
//1.  1 阶 + 1 阶 + 1 阶
//2.  1 阶 + 2 阶
//3.  2 阶 + 1 阶

题设与要求：
    题设：每次可以爬一级台阶或者二级台阶；
    要求：爬N级台阶的方式有多少种？

分析难点 & 提出解决手段：
    难点：随着台阶数量n的变大，手动排列所有可能的爬法变得非常繁琐；
    解决手段1：使用归纳法找出相邻项之间的规律；
    解决手段2：使用递归；

---
使用递归：
前提：
    1 当前问题能够拆解成为规模更小的同类问题吗？
        YES
    2 更小同类问题的答案有助于解决原始问题本身吗？
        YES
    所以可以使用递归来解决当前问题；

SOP：
    0 递归方法的作用（未必与题设完全对应）：计算出在只能按照特定单步走法时，走到第N级台阶一共有多少种走法；
    1 递归终结条件：只有一级台阶————这时候就只有一种走法；
    2 本地递归需要完成的事情：
        计算走(N-1)级台阶的走法T种；
        计算走(N-2)级台阶的走法S种；
            问：M与N种有没有重合的走法？？？没有，因为它们达到的终点台阶就不一样
        (T + S)就是最终的结果

递归的解法会导致栈溢出😳

---
手段2：使用动态规划；
为什么可以使用DP来解决这个问题呢？
    祭出动态规划的4大特征：
        xxx

算法的可靠性验证：
    The solutions calculated by the above approach are complete and non-redundant.
    通过上面的方式来计算得到的结果是complete & non-redundant
    The two solution sets (n1 and n2) cover all the possible cases on how the final step is taken.
    这两种方式
    And there would be NO overlapping among the final solutions constructed from these two solution sets,
    because they differ in the final step.


