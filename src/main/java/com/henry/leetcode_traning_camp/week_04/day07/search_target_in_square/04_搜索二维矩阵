# 74 搜索二维矩阵

编写一个高效的算法 来 判断 m x n 矩阵中，是否存在一个目标值。
该矩阵具有如下特性：
    #1 每行中的整数 从左到右按升序排列。
    #2 每行的第一个整数 大于 前一行的最后一个整数。

示例 1：
输入：
    matrix =
    [
        [1,3,5,7],
        [10,11,16,20],
        [23,30,34,50]
    ],
    target = 3
输出：true

===
题设与要求
题设：
    #1 给定一个m×n的二维矩阵；
    #2 矩阵中的每一行的整数都 从左往右升序排列；
    #3 矩阵中的每一行的第一个整数 都大于 前一行的最后一个整数；
要求：
    #1 判断该二维数组中 是否存在一个target；
    #2 要求 线性的时间复杂度；

===
分析难点 & 提出解决方案
难点1：如何能够在一个二维数组中 判断是否存在target？
    手段1：暴力列举比对；
    时间复杂度 O(m*n);

    手段2：既然每一个子数组 都是有序的，就干脆 在每一个子数组中进行二分查找；
    时间复杂度O(m*log(n))
    can we do better? yes

    手段3：手段2只使用了 有序的特性，但是没有使用特性3
    结合特性3，可以 把二维数组视为一个一维数组 来处理————这意味着 不改变二维数组 在内存中的状态；

===
思路：
    #1 把二维数组中的每个元素 列从左到右、行从上往下 串联起来，看作 一个一维数组；
    #2 通过/与%运算 来 找到一维数组中的元素 在二维数组中的位置；
    #3 在一维数组中 使用二分查找，并 计算出“查找到的元素” 在二维数组中的坐标；

代码参考：https://www.youtube.com/watch?v=eT0UqrYuqbg

===
SOP：
    // 〇 corner case
    // Ⅰ 获取二维数组的行列情况
    /* Ⅱ 准备进行二分查找 */
        // 1 计算左、右边界
        // 2 准备while循环，直到：1 left与right边界相遇； OR 2 找到了target元素
            // 2-1 计算数组的中间位置        技术处理：避免Integer Overflow
            // 2-2 计算中间位置在二维数组中的坐标，并从坐标索引到二维数组中的元素
            // 2-3 判断当前的中间位置上的元素是不是等于target 如果是，返回true 如果不是，调整区间边界
    // Ⅲ 准备没有查找到时的返回值😳