#1 为什么 只有if/else这两个分支??
答：
    设计哲学：平衡简洁性与效率
    常见实践：
        #1 二分查找的模板通常不单独处理 ==，除非题目明确要求优化边界条件（如需要第一个/最后一个匹配项）。
        #2 LeetCode 69 的意图：题目只需返回整数部分，因此合并 == 和 < 是完全合理的。
    总结
        不写 == 的情况：利用了 “二分查找的自然收敛性”，保证结果正确的同时简化代码。
        适用场景：当问题允许近似解 或 不需要严格提前终止时（如本题的整数平方根）。
        扩展思考：如果需要精确匹配（如搜索目标值），则需单独处理 == 以提前返回。
    这种设计是算法中“懒操作”（Lazy Evaluation）的体现————通过信任循环的最终收敛性，避免冗余判断。

#2 为什么 middle, leftBar, rightBar的类型都是long?
    类型	安全性	适用场景	推荐度
    long	完全避免溢出	通用解法，尤其是大数输入	⭐⭐⭐⭐⭐
    int	可能溢出，需限制输入范围	明确知道输入较小时（如竞赛约束）	⭐⭐

最佳实践：在工业级代码中，优先使用 long 以 “覆盖所有边界情况”，除非有严格的性能或空间限制。
LeetCode 场景：题目未限制输入范围，必须用 long 保证正确性。