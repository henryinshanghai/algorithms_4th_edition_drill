# 874 模拟行走机器人

//机器人在一个无限大小的网格上行走，从点 (0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令：
//
//
// -2：向左转 90 度
// -1：向右转 90 度
// 1 <= x <= 9：向前移动 x 个单位长度

// 在网格上有一些格子被视为障碍物。
//
// 第 i 个障碍物位于网格点 (obstacles[i][0], obstacles[i][1])
//
// 机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。
//
// 返回从原点到机器人所有经过的路径点（坐标为整数）的最大欧式距离的平方。

// 示例 2：
//
// 输入: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
//输出: 65
//解释: 机器人在左转走到 (1, 8) 之前将被困在 (1, 4) 处

补充信息：
// 0 <= commands.length <= 10000
// 0 <= obstacles.length <= 10000
// -30000 <= obstacle[i][0] <= 30000
// -30000 <= obstacle[i][1] <= 30000
// 答案保证小于 2 ^ 31

===========
题设与要求：
题设：
    1 机器人能够接受到3种指令；
        -2：向左转 90 度
        -1：向右转 90 度
        1 <= x <= 9：向前移动 x 个单位长度
        机器人执行的具体执行会通过一个指令序列给出
    2 平面本身是无限大的；
    3 平面中存在某些网格是障碍物，对于障碍物有：
        1 机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上；
        2 障碍物只会阻断机器人的当前步骤，后续步骤仍旧会被正常执行
        障碍物的具体位置会通过一个坐标的数组给出
要求：
    找到机器人经过的所有路径点中，使得到远点的欧式距离最大的点。并返回欧氏距离的值

分析难点 & 提出解决方案
难点1：如何按照指令序列来移动机器人？
方案：从指令序列中逐个取出指令，然后按照规则执行对应的操作，更新机器人的状态；

难点2：如何表示机器人的转向动作？
方案：？？？

难点3：在遇到障碍物时，如何正确地操作机器人？
方案：判断障碍物在不在机器人预期的行进路线中，如果在的话，把机器人停到障碍物的前一个位置

思路：
    1 准备一个集合，存储所有障碍物的位置；
    2 定义机器人能够面向的四个方向（使用二维数组），并初始化机器人的当前状态；
    3 遍历指令序列，开始执行指令；
        左转
        右转
        移动机器人指定步数
        每次指令执行完成后，都更新一下最大欧氏距离变量的值；

代码：
    /* 〇 准备一个集合对象，并把所有的障碍物的坐标存储到该对象中（以字符串的形式）*/
    /* Ⅰ 定义机器人前进的四个方向（使用int[][]数组） */
    /* Ⅱ 定义并初始化机器人的当前状态：位置坐标、方向(d=0)、欧氏距离结果 */
    /* Ⅲ 遍历指令，开始执行 */
        // 每次执行完成指令后，使用当前机器人的位置来更新一次result
    /* Ⅳ 返回最终的result */


