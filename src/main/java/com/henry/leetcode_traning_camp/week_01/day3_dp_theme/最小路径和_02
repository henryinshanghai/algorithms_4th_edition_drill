# 64
题设与要求：
    题设：
        1 一个m×n的网格；
        2 网格中的数字都是非负数；
        3 在网格中只能水平向右 / 竖直向下地移动到另一个网格元素；
    要求：
        找到从网格左上角元素到网格右下角元素的特定路径————此路径中元素的加和值最小（相比于其他可达路径）

分析：
    简化问题（如果可能的话）
    先抛掉定语（路径中元素的加和值最小），要如何找到从网格左上角元素到网格右下角元素的所有可能路径呢？
    为了方便表述，把“从xxx到ooo的所有可能路径”记为 {Possible Paths}

    手段1：从起点开始扩展路径；
    特征：每次扩展路径时，都面临着两种选择（向右 OR 向下）   【注：这是动态规划问题的信号】
    SUSPEND

    ---
    手段2：既然每次都只能按照既定规则前进，就可以从终点反向分析所有的可达路径；
    对于任意可达路径，到达终点前的上一个节点就只有两种可能：正上方 与 左侧；
    如果想要保证到达终点的路径的元素加和值最小，则：
        1 需要从到达上述两个网格元素的路径中找到一个较小的路径；【注：这是使用递归的信号】
        2 把这个找出的最小路径 + 终点网格的值，即为到终点的最小路径的加和值；
    特征：通过这种手段（拆解到终点的可达路径），把一个大的问题分解成了规模更小的同类问题【aka 自顶向下，拆解大问题】；
    结论： 可以定义一个递归函数来解决大问题；


---
手段2的思路：
    已知：可以通过定义一个递归函数来解决问题，但是现在给定的方法签名可能并不是我们需要的；
    1 要解决的问题是什么？
        从特定的网格中，找到满足特定条件的路径的元素加和值； （特定条件：从左上角网格到右下角网格）
        注：每一个特定，都会成为方法签名中的一个参数；

    2 递归方法作用：在特定的网格中，找到从特定起始位置到特定结束位置的最小加和值路径；并返回路径的元素加和值

--
确定递归方法的作用后，下一步：确定递归的基本情况 & 递归的起点；
    基本情况：用于终止递归，返回到上一级调用；
    递归起点：用于在客户端代码中调用递归方法时，传入合适的参数；

-
基本情况：[0][0] return grid[0][0];
递归起点/开始的地方：grid[row-1][col-1]

代码：
// 1
    if (row == 0 && col == 0) return grid[row][col];

    // 2 本级递归要做的事情 + 3 考虑边界情况（边界情况会使得计算公式变化）
    // 2-1 缩小问题规模，得到小问题的答案
    // 2-2 使用小问题的答案来解决发问题
    int minPathSum = -1;
    if (row == 0 && col != 0) minPathSum = grid[row][col] + minSum(grid, row, col -1);
    else if (row != 0 && col == 0) minPathSum = grid[row][col] + minSum(grid, row - 1, col);
    else {
        minPathSum = grid[row][col] + Math.min(minSum(grid, row - 1, col),  minSum(grid, row, col-1));
    }

    return minPathSum;
简化if()子句； minPathSum我觉得是有保留的必要的，增强代码的可读性

---
手段1：从起点开始扩展路径，直到路径扩展到网格的右下角。
在扩展路径时：
    1 不断更新路径的元素和；
    2 找到路径后，更新最小路径的元素和；

代码：
    int height = grid.length;
    int width = grid[0].length;

    // 遍历网格中的每一个元素
    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            /* trick: 把每一步计算得到的值记录下来 用于避免重复计算 */
            /* 根据当前索引所在的位置来计算 - 到达此位置的最小路径的元素和X -， 并把这个结果记录/覆盖到当前位置上的元素 */

            // 如果当前索引在左上角，说明路径刚刚开始，则：X = 二维数组的第一个元素
            if(row == 0 && col == 0) grid[row][col] = grid[row][col];
            // 如果当前索引走到了第一行中的每个位置，说明路径一直在向右走，则：X = oldX + 当前索引的元素值
            else if(row == 0 && col != 0) grid[row][col] = grid[row][col] + grid[row][col - 1];
            // 如果当前索引走到了第一列中的每个位置，说明路径一直在向下走，则：X = oldX + 当前索引的元素值
            else if(col == 0 && row != 0) grid[row][col] = grid[row][col] + grid[row - 1][col];
            // 如果当前索引走到了其他的位置，说明路径时而向右，时而向下，则：求出X，然后更新数组元素值
            else grid[row][col] = grid[row][col] + Math.min(grid[row - 1][col], grid[row][col - 1]);
        }
    }

    // 循环结束后，二维数组中所有位置的元素值都已经被更新了
    // grid[i][j]表示的是：到达(i, j)位置的最小路径的元素和X 所以返回“到右下角元素的X”
    return grid[height - 1][width - 1];

这种解法的时间复杂度为O(N^2) 提交只能击败20%的其他用户；
参考：https://leetcode.com/problems/minimum-path-sum/discuss/344980/Java.-Details-from-Recursion-to-DP.

------
其他的DP解法：
参考1：https://leetcode.com/problems/minimum-path-sum/discuss/23555/AC-Java-DP-solution-v.startVertex.-TLE-Dijstra-solution
时间复杂度也是：O(N^2) 提交击败20%的用户   耗时5ms

参考2：https://leetcode.com/problems/minimum-path-sum/discuss/180305/My-Java-DP-Solution-or-Easy-to-understand-or-Beats-96
时间复杂度也是：O(N^2)  提交击败了87%的用户 耗时3ms
WHY？
可能是在循环中进行判断的基础操作本身就比较耗时

参考3：官方题解
时间复杂度也是O(N^2) 步骤其实与参考2是一样的。提交下看看效果 也是一样的

Ciao~