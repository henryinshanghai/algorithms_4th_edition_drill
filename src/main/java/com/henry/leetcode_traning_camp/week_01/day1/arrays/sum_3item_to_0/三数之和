# 15
------
题设与要求：
给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？
请你找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

示例：
// 给定数组 nums = [-1, 0, 1, 2, -1, -4]，
//
//满足要求的三元组集合为：
//[
//  [-1, 0, 1],
//  [-1, -1, 2]
//]

分析（难点） & 提出解决手段：
    数组中的元素可能会重复————重复的元素必须要进行处理，否则可能产生重复的三元组【题目要求重复的三元组不能计入结果中】
    难点：如何能够列举出数组中所有可能的三个数字的组合？
    解决手段1：使用三个指针，进行三重循环； 时间复杂度O(N^3) 八成会超时
    解决手段2：
        1 先对数组进行排序（升序）；
        2 然后使用定指针 + 动指针的方式从有序数组中找到满足条件的三元组；
            注：处理过程中，要跳过数组中的重复元素。否则会导致“同一个满足条件的三元组被多次计入结果集合中”


代码：

        // 〇 鲁棒性代码
        List<List<Integer>> res = new LinkedList<>();
        if(nums == null || nums.length < 3) return res;

        // Ⅰ 对数组中的元素进行排序
        Arrays.sort(nums);

        // Ⅱ 准备使用定指针 + 动指针的方式来找到数组中满足条件的三元组
        for (int anchor = 0; anchor < nums.length - 2; anchor++) {
            /* 1 对一些个特殊情况进行优先处理 */
            // 1-1 三元组中的最小值大于0
            ...

            // 1-2 如果发现定指针指向的元素与它的前一个元素相同，说明数组中出现了重复元素。则...
            // 向后移动定指针，直到出现一个新的元素   手段：continue + anchor++
            ..

            // 2 准备两个动指针    用于查找满足条件的(b+c)
            ...

            // 3 在定指针的前提下，准备一个循环    作用：查找当前子数组中所有满足条件的(b+c)
            while(front < back){
                int sum = nums[anchor] + nums[front] + nums[back];

                if (sum == 0) {
                    res.add(Arrays.asList(nums[anchor], nums[front], nums[back]));

                    // 3 然后移动front指针与back指针，以查找当前子数组中是否还存在其他的(b+c)

                    /* 3-1 移动指针前，需要跳过重复元素，以免出现结果集合中添加了重复的三元组 */
                    // 作用：把front指针移动到 相同元素序列的边界上
                    // 手段：while循环（因为不知道有多少个重复的元素 aka 循环应该执行几次 aka 指针应该移动几次） + 条件判断
                    // 特征：可以把条件判断放在循环里面来简化循环体的代码
                    ...

                    // 同样地，把back指针也移动到 相同元素序列的边界上
                    ...

                    /* 3-2 指针移动到相同元素序列的边界后，再移动指针到一个新的元素上 */
                    ...
                } else if (sum < 0) { // 说明front指针指向的元素有点子小，把front指针右移
                    // 这种情况下就不用跳过重复元素了，因为即使元素重复，也不会导致最终的结果出现重复的三元组
                    // 但如果跳过重复元素也许性能会高一点,可以比较一下
//                    front++;
                    while(front < back && nums[front] == nums[++front]);
                } else {
//                    back--;
                    while(front < back && nums[back] == nums[--back]);
                }
            }
        }

        return res;

------
相同解法的其他代码：
Arrays.sort(num);

        // 准备一个集合 用来存储多个元组
        List<List<Integer>> res = new LinkedList<>();

        // 定指针 + 双指针
        for (int i = 0; i < num.length-2; i++) {
            // 找到第一个非重复的元素...
            if (i == 0 || (i > 0 && num[i] != num[i-1])) {
                // 准备两个指针 并更新sum值
                int lo = i+1, hi = num.length-1, sum = 0 - num[i];
                // 在子数组中找到满足条件的(b+c)
                while (lo < hi) {
                    if (num[lo] + num[hi] == sum) { // 如果找到了预期的(b+c)
                        // 添加xxx到集合中
                        res.add(Arrays.asList(num[i], num[lo], num[hi]));
                        // 调整指针来跳过子数组中的重复元素
                        while (lo < hi && num[lo] == num[lo+1]) lo++;
                        while (lo < hi && num[hi] == num[hi-1]) hi--;
                        // 调整指针
                        lo++; hi--;
                    } else if (num[lo] + num[hi] < sum) lo++;
                    else hi--;
                }
            }
        }
        return res;
代码其实完全相同。只是把sum换了一种方式表达而已 😄

---
在IDEA上实现一个Solution类型，然后问一下助教：这里的while(循环条件 + 判断条件的做法)是不是有助于提高性能？
答：这两种写法的效果对循环的影响完全不同，并不是一种简化写法
