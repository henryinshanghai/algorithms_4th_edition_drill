最坏情况下，查找和插入操作的时间界限

在单词查找树中，找到指定的键值对 需要花多久时间？
对于二叉查找树、散列表以及第3章中所介绍的其他算法，
都需要使用 “数学分析” 来 回答这个问题。

但是对于单词查找树，这个问题很简单。
命题G 在单词查找树中，查找一个键 或是 插入一个键时，访问数组的次数 最多是 键的长度+1.
证明
    根据代码可以知道，put()和get()方法的递归实现，都使用了一个参数 currentCharacterSpot。
    它的初始值是0，每次调用都会+1，当该位置等于键的长度时，递归调用就会停止。

从理论的角度来说，命题G 意味着单词查找树 对于“命中的查找” 是最为理想的 -
我们不能奢求 查找所需要的时间 比起 “与被查找键的长度成正比” 更好。
因为 无论使用什么样的算法 和 数据结构，我们都需要
先 检查完字符串键中的所有字符，才能够 真正判断出 是否找到了该键。

从实际角度来说，这个保证也非常重要 - 因为它说明：查找时间 与 符号表中键的数量 是无关的。
当我们在处理 类似于车牌号码的7个字符的键时，可以知道 查找或插入操作 最多只需要检查8个结点；
当我们在处理20个字符的数字账号时，最多只需要检查21个结点，就能够完成 查找或插入操作。