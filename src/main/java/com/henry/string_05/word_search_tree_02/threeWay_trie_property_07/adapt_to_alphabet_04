字母表

使用三向单词查找树最大的好处是：
它能够很好地适用  实际应用中可能出现的 被查找键的不规则性。
🐖 要特别注意的是，不应该 按照用例所提供的字母表 来 构造字符串 - 这对于单词查找树很关键。

这主要会产生 两点影响。
#1 首先，实际应用中的键，都来自于 大型字母表，而且 字符集中各个字符的适用是非常不均衡的。
有了三向单词查找树，我们可以使用256个字符的ASCII编码 或者 65536个字符的Unicode编码，
而不用担心 256向分支 或者 65536向分支 所带来的巨大开销，
也不用判断 哪些才是相关的字符集。

非罗马字母表的Unicode字符串中 可能会含有上千种字符————三向单词查找树
特别适合于 可能含有此类字符的 Java标准String类型的键。

#2 其次，实际应用程序中的键 常常有着 类似的结构（这在不同的应用程序之中可能不同）
键的一部分 可能只会使用字母，而另一部分 可能只会使用数字。
在加利福尼亚的车牌号例子中，第二、三、四个字符都是大写字母（R=26），
其他字符都是数字（R=10）.
在 由这种键所构造的三向单词查找树中，
一部分结点 会被表示为 10结点的二叉查找树??（键的数字部分），
另一部分结点 会被表示为 26结点的二叉查找树??（键的字母部分）。

这种结构的生成是自动的，不需要 对键进行特别的分析。