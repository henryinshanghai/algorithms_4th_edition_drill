和排序一样，我们也可以利用 字符串的性质 来 开发出
比起第3章中所介绍的通用算法 更为有效的查找算法。
这样的算法 能够应用于 以字符串作为键的一般应用程序。

具体来说，本节中所讨论的算法 在一般的应用场景中（甚至对于巨型的符号表）
都会能够得到以下的性能：
#1 查找命中所需的时间 与 被查找的键的长度 成正比；
#2 查找未命中 只需要检查 若干个字符。

仔细思考过后，你就会发现，上面👆的性能是非常惊人的。
它们是算法研究的最高成就之一，也是
之所以成功建设 现今能够便捷、快速地访问海量信息 所以来的基础设施的重要因素。

更重要的是，我们可以扩展符号表的API，来 添加 基于字符的 用于处理 字符串类型键的操作。
这些个操作在实际应用中 非常强大。

为 字符串键的符号表 所添加的新的API：
#1 把泛型的Key类型 换成了 具体类型String;
#2 添加了3个新的方法：longestPrefixOf(), keysWithPrefix(), keysThatMatch();

遵守的约定：
#1 不接受重复的键、空键；
#2 值不能为空。

从 对字符串的排序算法中 可以看到，指定字符串的字母表 常常是非常重要的。
对 小型字母表的简单而高效的实现 不适用于 大型字母表 - 因为后者消耗的空间太多。

基于这种情况，应该添加一个构造函数， 来 允许用例指定 自己所使用的字母表。
我们会在本节稍后讨论这个构造函数的实现，但暂时先不在API中列出它。
现在先把经理集中在 字符串类型的键上。
