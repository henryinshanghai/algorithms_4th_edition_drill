Trie数据结构

作用：存储并取出字符串类型的数据；
应用：用于实现 key为字符串的 符号表；
概念：
    字符串key：在符号表的entry中，key是一个字符串；
    字符串的字符序列：由字符串中的字符 顺序连接 所形成的序列；
    序列 在Trie中对应的路径：在Trie树中，由序列中的字符 对应的链接(结点)所构成的路径；
原理：
    Trie树的结构 能够很好地利用 字符串前缀的特性。
步骤：
    #1 从符号表中获取 指定的keyStr所关联的value值；
        如果对路径的查询 终止于一个null，说明trie中不存在这样的路径，则：查找未命中，返回null
        如果对路径的查询 终止于 keyStr的最后一个字符，说明 trie中存在有这样的路径，则：查找命中，返回 路径的最后一个结点；

        如果 当前字符(currentRootNode)查询成功，需要 继续在trie子树(successorNode)中 递归地查询 路径的剩余部分(startCharacterSpot)；

    #2 向符号表中添加 keyStr -> value的映射条目；
        如果对路径的查询 终止于一个null，说明trie中缺少针对于当前字符的结点，则：创建出一个空结点 链接到trie树上去
        如果对路径的查询 终止于 keyStr的最后一个字符(手段：spot参数==keyStr的长度)，说明 trie中存在有这样的路径，则：查找命中，更新 路径的最后一个结点上所关联的value，并返回该结点

        如果 当前字符查询成功，需要 继续在trie子树(successorNode)中 递归地添加 路径中的剩余部分。并
        在添加完成后，把添加后的子树 绑定回去 原始的子树引用。以此来 更新原始的树

一句话描述：
    借助 Trie树的特性，符号表能够回答 很多关于prefix的问题；