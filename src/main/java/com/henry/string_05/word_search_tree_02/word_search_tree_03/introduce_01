本节中，我们要学习一种 叫做 单词查找树的数据结构。
它由字符串键中所有的字符 构造而成，并且 允许使用 被查找键中的字符(??) 进行查找；

它的英文单词 trie 来自于 E.Fredkin 在1960年玩的一个文字游戏👇
因为 这个数据结构的作用是 取出(retrieval)数据 - 发音发成try 是为了避免与tree相混淆。

我们首先会 描述单词查找树的基本性质（包括 查找和插入算法），
然后再 详细学习 它的数据表示方法 和 Java实现。

===
单词查找树的基本性质

是：一种逻辑数据结构；
作用：支持单词的存储 与 查询；
特征：
    #1 由结点组成；
    #2 结点之间通过链接相连；
    #3 链接可以指向另一个结点，也可以为空链接（指向null）
    #4 每个结点都最多只存在有一个 指向它的结点（父结点） 🐖 根结点没有父结点；
    #5 每个结点 都含有R条链接（R为字母表的大小）
    #6 递归性 aka 可以把任意一个结点 视为一个以其作为根结点的（子）单词查找树；
    #7 每条链接 都对应着 一个字符 - 由于一个链接只会指向一个结点（存在1:1对应性），所以 我们可以 使用链接所对应的字符 来 标记 链接所指向的结点；
        🐖 除了根结点，因为 没有任何链接 指向根结点
应用：用于实现 以字符串作为键 的符号表（key -> value）；
    手段：
        #1 树中的每个结点 用于对应 key中的每个字符；
        #2 单词查找树中的每一个结点 都会关联 一个对应的值，用于 对应value；
    具体做法：我们 把 每个键所关联的值 保存在 此键的最后一个字符所对应的结点中。

符号表 <-> 单词查找树 之间的对应情况
🐖 单词查找树中，值为空的结点 在符号表中不存在对应的键，它们的存在 只是为了 简化单词查找树中的 查找操作；

单词查找树的图像化表示（用于 形象化地讨论它）
🐖 由于单词查找树 一般都含有 大量的空链接，所以 在绘制树的时候，一般会 忽略空链接。

