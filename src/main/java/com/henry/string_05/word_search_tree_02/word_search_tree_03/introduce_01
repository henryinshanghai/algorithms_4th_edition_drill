本节中，我们 要学习一种 叫做 单词查找树 的数据结构。
它 由 字符串键中所有的字符 构造而成，并且 允许使用 被查找键中的字符(??) 进行查找；

它的英文单词 trie 来自于 E.Fredkin 在1960年玩的一个文字游戏👇
因为 这个数据结构的作用是 取出(retrieval)数据 - 发音发成try 是为了 避免 与tree相混淆。

我们首先会 描述单词查找树的基本性质（包括 查找 和 插入算法），
然后再 详细学习 它的数据表示方法 和 Java实现。

===
单词查找树的基本性质

是：一种逻辑数据结构；
作用：支持单词的存储 与 查询；
特征：
    #1 由 结点 组成；
    #2 结点之间 通过链接相连；
    #3 链接 可以指向 另一个结点，也可以 为 空链接（指向null）
    #4 每个结点都 最多只存在有一个 指向它的结点（父结点） 🐖 根结点 没有 父结点；
    #5 每个结点都 含有 R条链接（R 为 字母表的大小）
    #6 递归性 aka 可以 把 任意一个结点 视为 一个以其作为根结点的（子）单词查找树；
    #7 每条链接都 对应着 一个字符 —— 由于 一个链接 只会指向 一个结点（存在1:1对应性），所以我们 可以使用 链接所对应的字符 来 表示 链接所指向的结点；
        🐖 除了 根结点，因为 没有任何链接 指向根结点
应用：用于实现 以字符串作为键 的符号表（key -> value）；
    原理：可以使用 树中节点顺序连接 所构成的路径 来 表示key字符串；
    手段：
        #1 树中的 每个结点都 用于对应 key中的单个字符；
        #2 树中的 某些结点 会关联 一个对应的值，用于对应 key所关联的value；
    具体做法：我们 把 每个键所关联的值 保存在 此键的最后一个字符 所对应的结点 中。

符号表 <-> 单词查找树 之间的对应情况
🐖 单词查找树 中，值为空的结点 在符号表中 不存在 对应的键，它们的存在 只是为了 简化单词查找树中的 查找操作；

单词查找树的 图像化表示（用于 形象地 讨论它）
🐖 由于 单词查找树 一般都含有 大量的空链接，所以 在绘制树的时候，一般会 忽略空链接。