===
LZW的单词查找树

LZW压缩算法 含有 两种符号表操作👇
#1 找到(search) 输入 和 符号表中存在的所有键的 最长前缀匹配；
#2 把 匹配的键 和 前瞻字符相连接 得到一个新的键，
   并 把新的键 和 下一个编码关联，并作为新的条目 添加到(insert)符号表中。

5.2节中所介绍的“单词查找树结构” 完全就是为了以上操作 量身定做的。

对于上一个示例，它的单词查找树表示 如图（图略）。
#1 查找 “最长前缀匹配”时，我们需要 从根结点开始遍历树，使用“结点的标签” 来 和“输入字符”进行匹配；
#2 添加一个新编码时，我们需要 先创建一个 由新编码和前瞻字符所标记的结点，并 把它和“查找结束于的结点” 相关联。

在实践中，为了节省空间，我们使用的是 5.2节中介绍的“三向单词查找树”。

值得一提的是，这里对单词查找树的使用 与 霍夫曼编码对单词查找树的使用 并不相同👇
#1 霍夫曼编码使用单词查找树，因为需要满足“前缀码”的约束 - 任何编码 都不会成为 其他编码的前缀；
#2 对于LZW算法，它使用单词查找树，是因为 对于每个“由输入字符串所得到的键”，其前缀 也一定会是 “符号表中的一个键”
（因为 当前键 = 前一个键 + 前瞻字符c组成）。