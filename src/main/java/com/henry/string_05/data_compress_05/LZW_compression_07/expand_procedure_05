===
LZW压缩的展开

如示例所示，LZW压缩的展开 所需要的输入 是一系列8位的编码，
而输出则是 一个由“7位的ASCII字符”所组成的字符串。

在展开时，我们会维护一张 关联“字符串键”和“编码值”的符号表（这张表的逆向表 就是 压缩时所使用的符号表）。

① 在这张表中，加入00到7F 和 所有单个ASCII字符的字符串的关联条目；
② 把第一个 未关联的编码值 设置为81（80保留为 文件结尾的标记）；
③ 把 保存了当前字符串的变量val?? 设置为 含有第一个字符的字符串；

在遇到 编码80（文件结束）之前，不断进行以下操作👇
#1 输出 “当前字符串”val；
#2 从输入中 读取一个编码x；
#3 在符号表中，把“最长匹配前缀s”对应的编码 设置为 和x相关联的值；
#4 在符号表中，把“下一个未分配的编码值” 分配给 val+c(val连接上c),其中c是“s的首字母”；
#5 把“当前字符串val” 设置为s。

这个过程比起压缩要更加复杂，其原因来自于“前瞻字符”👇
需要读取下一个编码 来 得到 “与其相关联的字符串”的首字母 - 这使得整个过程不同步。

