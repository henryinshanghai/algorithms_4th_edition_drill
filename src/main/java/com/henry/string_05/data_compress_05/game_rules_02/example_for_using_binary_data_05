==
举例

以下是一个简单的示例，假设你使用一个数据结构 把日期表示为3个int值（月、日、年）。
使用StdOut 把这些值 使用“12/31/1999”的格式 来 输入需要的10个字符，也就是80位比特。

如果使用BinaryStdOut 直接输出 这些值，则会需要96位 = 32*3（每个int值 32位）。
如果使用byte值（一个字节8位） 来 表示月和日，用short值（两个字节16位）来表示年，输出将只有32位 = 8*2+16。
如果使用BinaryStdOut，可以只使用 4位、5位和12位的3个域，输出总共21位，如图（略）
（实际上是24位，因为文件必须是完整的8位字节，因此 close()方法 会在末尾添加三个0位。）
    #1 使用4位二进制数 来 表示具体数值的大小； #2 如果位数不是4的倍数，则补零。
注意：这里是 最粗糙的数据压缩方式。


写入一个日期的4种方法 & 所需要使用的比特数量👇
#1 使用字符流（StdOut） - 由8位比特组成的单个字符，表示“12/31/1999”需要80比特位；
#2 使用3个int值（BinaryStdOut）- 使用32位的int来表示年、月、日的数字，表示“12/31/1999”需要3个int数值，也就是32*3=96比特位；
#3 使用2个char值和1个short值（BinaryStdOut） - 使用两个字节的char(16位) 和 一个short（16位）来表示“12/31/1999”，共计32比特位；
#4 使用一个4位、一个5位和一个12位的3个域（BinaryStdOut）;
    按需使用不确定位数的比特 来 表示各个域的数值，12需要4位比特、31需要5位比特、1999需要12位比特，总计需要21位比特。
向标准输出中 写入一个日期的4种方法👆