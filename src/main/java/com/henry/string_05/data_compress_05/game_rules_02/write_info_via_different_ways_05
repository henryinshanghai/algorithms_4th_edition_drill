==
举例

以下是一个 简单的示例，假设 你 使用一个 数据结构 把 日期 表示为 3个int值（月、日、年）。
方案一：如果 使用StdOut 把 这些值 以“12/31/1999”的格式 来 输出，则：
会需要 10个字符，也就是 80位比特（每个char值 8位）。

方案二：如果 使用BinaryStdOut 直接输出 这些值，则：
会需要96位 = 32*3（每个int值 32位）。

方案三：如果 使用byte值（一个字节8位） 来 表示月和日，用short值（两个字节16位）来 表示年，则：
输出将只有32位 = 8*2+16。

方案四：如果 使用BinaryStdOut，可以只使用 4位、5位和12位的3个域（使用二进制数 来 表示10进制数），则：
输出总共21位，如图<略>（实际上是24位，因为文件 必须是 完整的8位字节，因此 close()方法 会 在 末尾 添加三个0位。）
    #1 使用 对应的二进制数值 来 表示 具体数值的大小； #2 如果 总位数 不是 4的倍数，则补零直到 4的倍数。
注意：这里是 最粗糙的 数据压缩方式。


写入一个日期的4种方法 & 所需要使用的比特数量👇
#1 使用 字符流（StdOut） - 由 8位比特 所组成的单个字符，表示“12/31/1999” 需要 80比特位；
#2 使用 3个int值（BinaryStdOut）- 使用32位的int 来 表示年、月、日的数字，表示“12/31/1999”需要3个int数值，也就是 32*3=96比特位；
#3 使用 2个char值 和 1个short值（BinaryStdOut） - 使用 两个字节的char(16位) 和 一个short（16位）来 表示“12/31/1999”，共计 32比特位；
#4 使用一个4位、一个5位和一个12位的3个域（BinaryStdOut）;
    按需使用 不确定位数的比特 来 表示各个域的数值，12 需要 4位比特、31 需要 5位比特、1999 需要 12位比特，总计需要 21位比特。
向 标准输出 中 写入一个日期 的4种方法👆