==
二进制转储

在调试（debug）的时候，我们应该 如何检查（check）比特流或者字节流的内容呢？
早期的程序员 面临着 这个问题，因为在当时 寻找bug的唯一方式就是 检查内存中的每个比特。
转储(dump)这个词  从计算机的早期一直沿用下来，
它表示的是 比特流的一种 “可供人类阅读的（readable for human）形式”。

如果你试图使用一个编辑器 来 打开一个二进制文件，
或者 使用文本方式 查看一个二进制文件的内容（或者 运行一个使用BinaryStdOut的程序），
那么 你会看到一团乱码（内容取决于 所使用的系统）。

BinaryStdIn可以避开 对系统的依赖性，允许 我们编写 自己的程序 来
把 比特流 转化为 标准工具所能够处理的内容。

例如，如下框注所示的程序BinaryDump中，
调用了 BinaryStdIn 来 把标准输入中的比特 按照0和1的形式 给打印出来。

在处理小规模输入时，这个程序是一个很有用的调试工具。
类似的工具 HexDump 可以 把数据组织成8位的字节，并 把它打印成为 “各自表示4位的” 两个十六进制数。

用例 PictureDump，可以用Picture对象 来 表示比特，
其中 白色像素 表示0，黑色像素表示1。

你可以从本书的网站上下载 BinaryDump、HexDump和PictureDump，参考如图。

我们一般会使用 管道（pipe |）和重定向（redirect <、>）等方式 来 在命令行中处理二进制文件，
把 编码器的输出 通过管道，传递给（pass to） BinaryDump、HexDump或者PictureDump，
或者 把它重定向到（redirect to）一个文件之中。

代码参考：BinaryDump。