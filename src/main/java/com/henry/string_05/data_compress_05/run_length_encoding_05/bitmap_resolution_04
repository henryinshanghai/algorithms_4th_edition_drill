==
提高位图的分辨率

游程编码 广泛应用于位图的 主要原因是👇
随着分辨率的提高，它的效果 也会大大的提高。

证明这一点很简单。
假设 把上一个例子中的分辨率 给提高一倍，则：
#1 总比特数变成了原来的4倍；
#2 其中游程的数量 变成了 差不多原来的2倍；
#3 游程的长度 变成了 差不多原来的2倍；
#4 压缩后的比特数量 变成了 差不多原来的2倍；
#5 因此，压缩率变成了原来的一半！

没有使用 “游程编码” 时，如果分辨率提高一倍，则：图像所需的空间 就会变成原来的4倍；
使用了 “游程编码”之后，如果分辨率提高一倍，则：“压缩后的比特流的长度” 只会变成 原来的2倍。

也就是说，随着所需空间的增大，压缩比 与 分辨率 成反比；

比如，我们的字母“q”（在低分辨率时）的压缩率为74%；
如果把分辨率提高到64×96，压缩比就下降为37%；

我们从图中PictureDump的输出中，可以明显地看出这个变化。

高分辨率的字符图像 所需要的空间 是 低分辨率字符图像的4倍（因为 两个维度上的长度都加倍了），
但是压缩后的版本 所需要的空间 就只有 原来的2倍（只在一个维度上增倍）。

如果继续把分辨率提高到 128×192（这已经接近于打印所需要的分辨率），
则 压缩率会进一步下降到 18%。

小型测试用例(40位)

ASCII文本（96位）

一幅位图（1536位）

一幅分辨率更高的位图（6144位）

图略
使用游程编码 来 压缩和展开 比特流

游程编码在许多场景中非常有效，但是在许多情况下 我们希望压缩的比特流
并不会包含有 较长的游程（比如 典型的英文文档）。

下面我们来学习两种 适用于多种类型的文件压缩算法。
它们的应用 非常广泛，在 从网络上下载文件时，就很可能会使用到它们。
