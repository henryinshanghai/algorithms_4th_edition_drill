===
游程编码

比特流中 最简单的冗余形式 就是 一长串重复的比特。
下面我们学习一种经典的游程编码（Run-Length Encoding）,
它利用这种冗余 来 压缩数据。
比如，下面这个40位长的字符串：
00000,00000,00000,11111,11000,00001,11111,11111

这个字符串包含有15个0，然后是7个1，然后是7个0，然后是11个1，
因此我们可以把这个比特字符串 编码成为 15,7,7,11。

由于 所有的比特字符串 都是 由交替出现的0和1所组成的，
因此我们只需要 对“游程的长度”进行编码即可。 // 游程中具体是0还是1呢??

在这个例子中，如果
#1 使用4位二进制数 来 表示长度，并且
#2 使用连续的0 来 作为”二进制数的开头“，那么👇
就可以得到一个16位长的字符串(15=1111, 7=0111, 7=0111, 11=1011):
    1111,0111,0111,1011

使用”游程这种方式“得到的压缩率为16/40=40%。
为了把 这里的描述 转化成为 一种有效的数据压缩方法。
我们需要解决以下几个问题👇
#1 应该使用 多少位的比特 来 记录”游程的长度“？（上例中使用的是4位比特）
#2 如果 某个游程的长度 超过了 ”所能够记录的最大游程长度“时，要怎么处理？
#3 如果 某个游程的长度 所需要的比特位数 少于 ”用于记录游程长度“的比特位数时，要怎么处理？

我们所感兴趣的比特流类型是：“在其中 短游程相对较少的长比特流”
因此上述问题的答案是：
#1 游程长度应该在0-255之间，这样我们就能够使用”8位二进制数字“来为其编码；
#2 在需要的情况下，使用”长度为0的游程“?? 来保证 所有游程的长度 都会小于256；// how??
#3 我们也会把“短游程”进行编码（这会使得 最终的输出变长）

这些决定非常容易实现，而且 对于实际应用中经常出现的几种比特流 非常有效。
它们不适用于 含有大量“短游程”的输入👇
因为原理上讲，只有在”游程的长度“ 大于 ”将它们用二进制表示“所需要的长度 时，才能够节省空间；
而短游程可能会导致 其二进制表示的长度 比起 其本身的长度 还要更长...😳
