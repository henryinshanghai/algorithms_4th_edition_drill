===
计算散列函数

对于5位（模式字符串的长度）的数值，只需要使用int值 就能完成 所需的计算。
但是如果M是100 或者 1000怎么办？

这里使用的是Horner方法，它和3.4节中见过的 用于字符串 和 其他多值类型的键 的计算方法 非常相似，
代码如下👇
private long hash(String key, int M) {
    // 计算key[0..M-1]的散列值
    long currentHashResult = 0;
    for(int currentSpot = 0; currentSpot < M; currentSpot++) {
        // 🐖 每次的计算过程，都会执行取余操作
        int currentDigit = key.charAt(currentSpot);
        currentHashResult = (baseSize * currentHashResult + currentDigit) % Q; // baseSize表示进制的大小
    }

    return currentHashResult;
}
Horner方法：使用 除留余数法 来 计算散列值👆

这段代码 计算了 由char值数组所表示的、R进制的M位数的散列函数，它所需要的时间 与M成正比。
把M作为参数 传递给该方法，这样就能够 把它 同时用于 模式字符串与正文。

对于 这个数中的每一个数字，把 散列值 乘以R，加上这个数字，除以Q 并 取其余数。
具体地 计算 模式字符串的散列值的过程如下所示👇
略

我们也可以 使用同样的方法 来 计算文本中的子字符串散列值，
但这样一来 字符串查找算法的成本 就将是 对文本中的每个字符 进行乘法、加法和取余计算的成本之和。

在 最坏的情况 下，这会需要 NM次操作，相对于 暴力子字符串查找算法 来说，并没有任何的改进。