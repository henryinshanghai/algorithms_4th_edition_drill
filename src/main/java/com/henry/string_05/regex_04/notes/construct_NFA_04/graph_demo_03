===
这些个简单的规则 就已经可以 拿来构造出 任意复杂的正则表达式 所对应的NFA了。
算法5.9实现了 这些规则。

它的构造函数 创建了 给定正则表达式 所对应的∈-转换有向图。

算法处理样例的轨迹如图👇
图略

为了实现的 简洁和清晰，我们 把 一些实现细节（比如 处理元字符、字符集描述符、闭包的简略写法、多项或运算符等）留作练习。
当 不需要上述的扩展 时，NFA构造过程 所需要的代码 非常少。

评论：NFA构造代码 是我们见过的 最巧妙的算法之一。