首先，给出如下 正则表达式的正式定义。

一个正则表达式可以是：
#1 一个空字符串∈；
#2 单个字符；
#3 包含在括号中的 另一个正则表达式；
#4 两个或多个 连接起来的 正则表达式；
#5 由 或运算符 所分隔的 两个或多个 正则表达式；
#6 由 闭包运算符 所标记的 一个正则表达式。

这段定义 描述了 正则表达式的语法，说明了 什么样的字符串 才是一个 合法的正则表达式。

在本节中 对 给定正则表达式 的非形式化描述 是 它的语义。
作为复习，我们要继续 在形式定义中，对它们 进行总结。

定义（续）
每个正则表达式 所表示的 都是一个 字符串的集合。它们的定义 如下所述👇
#1 空正则表达式 所表示的字符串的集合 是空的，含有 0个元素；
#2 由一个字符 所表示的字符串的集合 只包含有 一个元素，也就是 该字符本身；
#3 由 括号 与 在其中的正则表达式 所组成的正则表达式 所表示的字符串的集合，与 括号内的正则表达式 所表示的字符串集合 相同。
#4 由 两个正则表达式 连接起来的 正则表达式 所表示的字符串的集合 是 这两个正则表达式 所分别表示的 字符串集合 的 叉乘结果。
#5 由 或运算符 所连接的两个正则表达式 所表示的字符串的集合 是 这 两个正则表达式 所分别表示的字符串集合 的 并集；
#6 由 一个正则表达式的闭包 所表示的字符串的集合 是 由空字符串∈ 或 把 “被修饰的正则表达式所表示的字符串集合”重复任意次 所得到的所有字符串 所组成的集合。

一般来说，给定正则表达式 所描述的语言 可能会 非常庞大，甚至可能是 无限的。

描述一种语言 可以有 许多种不同的方法，我们 必须要 尝试给出 最简洁的模式，
就像在 不断地尝试写出 简洁的程序 和 实现高效的算法一样。