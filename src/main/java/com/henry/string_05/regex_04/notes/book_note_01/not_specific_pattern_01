在 许多应用程序 中，我们在 查找子字符串 时，可能没有 被查找模式 的完整信息。

文本编辑器的用户 可能希望：
#1 只是 指定 模式的一部分；
#2 或者 指定 某种 能够匹配到 若干个不同单词的 模式；
#3 或者 指定 几种 可以任意匹配的 不同模式。

比如，生物学家 可能想要 在基因组序列中，找到 满足特定条件的基因。
本节中，我们将会学习 如何高效地 完整 此种类型的 模式匹配。

5.3节的算法 完全依赖 “完整的”模式字符串，因此 我们需要 寻找新的方法。

本节 将会学习的 一些基本工具 能够构造出 一个非常强大的 字符串查找程序。
它能够 在 长度为N的文本 中，匹配 长度为M 的复杂模式。
在 最坏的情况 下，它 所需要的时间 和MN成正比，而 在一般的应用程序中 还会快得多。

首先，我们需要一种 描述模式的方法，即一种严谨的 用于说明上述“部分子字符串的查找问题”的方式。
这份说明 必须含有 一些
比起 5.3节中所使用的 “检查文本字符串的第i个字符 和 模式字符串中的第j个字符 是否匹配”
更为强大的 原始操作。
为此，我们使用 正则表达式。
它能够 用自然、简单而强大的3种操作组合 来 描述模式。

程序员 使用正则表达式的历史 已经有数十年了。
随着 网络搜索的爆炸性增长，它们的使用 变得 更加广泛。

本节开始 会讨论 几个应用程序。
这不仅是为了 让你感受到 它的用途和功能，也是为了让你 对它的基本性质 更加熟悉。

和 5.3节中的KMP算法 一样，本节 也会使用
一种 能够 在文本中查找模式 的抽象自动机 来 描述 这3种基本的操作。

模式匹配算法 同样会构造出 一个这样的自动机，并模拟 它的运行。
当然，这种 模式匹配自动机 比 KMP算法的DFA 更加复杂，但是 不会超出 你的想象。

你会看到，我们 为模式匹配问题 给出的解答 和 计算机科学中最基础的问题 有着紧密的联系。
比如，我们 用于完成 ① 给定模式下的 字符串查找任务 的算法 和
② Java系统中 用来 将 Java程序 转化为 计算机上的机器语言 的算法 很相似。

我们 还会遇到 “非确定性”这个概念。
它在人们 对高效算法的追求 中，起到了 关键的作用。