缩略写法

一般的应用程序 都会 在基本规则的基础上 增加 各种额外的规则，来 更为简洁地描述 实际应用种 所需要的语言。

从 理论的角度 来看，它们都只是 涉及多个操作数的 一系列操作的 简略写法；
从 实际的角度 来看，它们是 对基本操作的 实用扩展，以便能够写出 更为小巧的模式。

#1 字符集的描述符
实际应用 时，只使用 一个或者几个字符 来 直接表示一个字符集的做法 通常能够 带来方便。
点(.)字符 用于表示 能够表示任意字符的 通配符。
包含在方括号中的 一系列字符 用于表示 这些个字符中的任意一个。
    🐖 这里的一系列字符 可以使用 一个范围 来 进行表示；
    🐖 如果 方括号中的开头字符 为 ^，则：表示 任意一个 非方括号中的字符。
这些记法 其实都是 一系列或操作的简写。

通配符、指定的集合、范围集合、补集

#2 闭包的简写
闭包运算符 用于表示 把它的操作数 复制/重复 任意多次。
在 实际使用 时，我们会希望能够 灵活地指定 重复的次数，或者 重复次数的范围。

手段：
#1 使用 + 来表示 至少复制/重复一次；
#2 使用 ? 来表示 重复0次 或者 1次；
#3 使用 写在{}中的 数字或范围 来 指定 重复的次数。

同样地，这些记法也是 一系列基本操作（连接、或、闭包）的简写。

#3 转义序列
有一些字符，是 用于构造 正则表达式字符串的 元字符（字符本身 在regex中 有 特殊的含义）。
比如 \ . | * ( )这些字符。

区分 元字符 与 字母表中的字面字符；
手段：使用 以反斜杠开头的 转义序列。

用法：
#1 转义字符\ + 单个元字符 用于表示 元字符的字面字符本身；比如 \\ 用于表示 \
#2 与 其他字符 一同构成的转义序列；\t 表示 一个制表符、\n 表示 一个换行符、\s 表示 任意空白字符。