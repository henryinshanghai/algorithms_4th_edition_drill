”存在有 能够猜测 到达接受状态 所需要的状态转换序列 的自动机“ 这样的设想，就好像
能够写出 解决任何问题的程序一样 - 这看起来很荒谬。

经过仔细思考，你会发现 这个任务 从概念上来说 并不困难：我们可以检查 所有可能的 状态转换序列。
只要其中 存在有 能够到达接受状态的序列，我们 就一定会 找到它。

===
自动机的表示

首先，我们需要 能够表示NFA。
选择很简单：
#1 正则表达式本身 已经给出了 所有的状态名（状态名 就是0到M之间的整数，M 表示的是 正则表达式字符串的长度）

使用char数组 re[] 来 保存 正则表达式本身，
这个数组 同时也表示了 “匹配的转换” - 只要 re[i] 存在于 字母表中，那么 就存在一个 从i到i+1的匹配转换。

#2 “∈转换” 最自然的表示方法 当然是 有向图 ——
它们都是 连接 0到M之间的各个顶点 的有向边（图中的红色边）。

因此，我们用 有向图G 来 表示 NFA中 所有的∈-转换。
在 讨论模拟的过程 之后，我们 会讨论 由 给定的正则表达式 来 构建有向图 的任务。

对于上面的例子，它的有向图 包含有以下9条边👇
0->1 1->2 1->6 2->3 3->2 3->4 5->8 8->9 10->11