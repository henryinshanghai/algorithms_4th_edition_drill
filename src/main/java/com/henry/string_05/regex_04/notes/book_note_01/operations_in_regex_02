使用 正则表达式 来 描述模式

我们的重点在于 对模式的描述：它 由 3种基本操作 和 作为操作数的字符 组成。
我们使用 语言 来 表示 一个字符串的集合（可能是无限的）；
使用 模式 来 表示 一种语言的详细说明。

我们 将要学习的规则 和 我们都已经很熟悉的算术表达式的规则 十分类似。

#1 连接操作
    第一种基本操作 就是5.3节中 使用过的 连接操作。
    当 我们写出AB 的时候，就指定了 一个语言{AB}。
    它含有一个 由两个字符所组成的 字符串，由A与B 连接而成。

#2 或操作
    第二种基本操作 用于 在模式中指定 多种可能的匹配。
    如果我们 在“两种选择”之间，指定了 一个“或运算符”，则：它们 就会属于 同一种语言。

    我们使用 竖线符号 | 来 表示这个操作。
    比如，A|B 指定的语言 是 {A, B}
    A|E|I|O|U 指定的语言 是 {A, E, I, O, U}

    特征：连接操作的优先级 高于 或操作。
    所以 AB | BCD 所指定的语言是 {AB, BCD}

#3 闭包操作
    第三种基本操作可以 将 模式的一部分 重复 任意的次数。
    模式的闭包 由 “把 模式 和 自身 连接任意多次（包括零次）而得到的 所有字符串” 所组成的语言。

    我们使用 * 来 表示 闭包操作。
    用法：把 * 标记在 “需要被重复的模式”的后面。

    特征：闭包操作的优先级 高于 连接操作。
    所以 AB* 所指定的语言，由 一个A 和 0个或多个B字符 所构成的字符串 来 组成，
    而 A*B 所指定的语言，由 0个或多个A 和 一个B字符 所构成的字符串 来 组成。

    “空字符串”的记号是 ∈，它存在于 所有的文本字符串之中（包括A*）。

#4 括号
    作用：用于 改变 默认的优先级顺序。
    比如 C(AC|B)D 所指定的语言 是 {CACD, CBD},
    (A|C)((B|C)D) 所指定的语言 是 {ABD, ACD, CBD, CCD},
    (AB)* 所指定的语言是 由AB 连接任意多次 所得到的所有字符串 与 空字符串 所组成的集合
    {∈, AB, ABAB, ...}

这些简单的例子 已经可以写出 虽然复杂，但却清晰而完整的 用于描述某种语言的正则表达式了。

有些语言 使用其他的方式（非正则的方式） 也能够表示，但是 找到这些方式 可能会很困难。

正则表达式 都是非常简单的 形式语言对象，甚至 比起 你在小学里学到的 算术表达式 更加简单。
我们会 使用它的简洁性 来 开发出 小巧而高效的算法 来 处理它们。