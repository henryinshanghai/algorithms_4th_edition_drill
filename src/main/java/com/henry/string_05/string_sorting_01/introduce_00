对于许多排序应用，决定排序应用的都是字符串。
在本节，我们会考察 能够利用字符串的特殊性质 来 将字符串键排序的方法。
它们将会比 第二章学习过的通用排序方法的效率更高。

我们将学习 两类完全不同的字符串排序方法。
它们都是为程序员服务了几十年的强大方法。

第一类方法的特征是：会从右往左地检查字符串中的字符；
名称：低位优先的字符串排序（Least-Significant-Digit First/LSD）.
使用数字 来 替代字符的原因 要追溯到 相同实践 在各种数字类型中的应用。
如果把一个字符串看作一个256进制的数字的话，那么 “从右向左检查字符串” 就等同于 先检查数字的最低位。
🐖 这种方法适用于 所有键的长度都相同的 字符串排序应用。

第二类方法的特征是：会从左往右地检查字符串中的字符；aka 首先检查的是 最高位的字符。
名称：高位优先的字符串排序(MSD).
高位优先的字符串排序 吸引人的地方在于，它们不一定需要检查 所有的输入，就能够完成排序。
“高位优先的字符串排序” 与 “快速排序” 类似, 因为它们都会
把需要排序的数组 切分为 独立的部分，并 递归地使用相同的方法来处理子数组 从而完成排序。
它们的区别之处在于 高位优先的字符串排序算法，在切分时，只会使用键的第一个字符，
而快速排序的比较则会涉及键的全部。

要学习的第一种方法 会为每个字符创建一个切分，
第二种方法则总会产生 三个切分，并且 对应 “被搜索的键的第一个字符” 小于、等于或大于 “切分键的第一个字符”的情况。

在分析字符串排序算法时，字母表的大小是一个重要的因素。
尽管我们的重点是 基于扩展的ASCII字符集的字符串(R=256), 但
也会分析 来自较小字母表的字符串（比如基因序列） 以及 来自较大字母表的字符串（比如含有 65536个字符的Unicode字母表
它是 自然语言编码的国际标准）

