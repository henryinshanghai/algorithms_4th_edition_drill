学习一种适用于小整数键的简单排序方法。
名称：键索引计数。

在一个班级中，学生被分成若干组，组号1、2、3、4.
目标：把全班同学按组号来分组。
特征：组号是一个比较小的整数；因此可以使用 键索引计数法 来 进行排序。

原始数组a[] 中的每个元素 都保存了 一个名字 与 他所属的组号。
a[i].key() 会返回 指定学生的组号。

算法的步骤：
#1 对每一个组号的元素个数 进行频率统计；
when a[spot].key() => groupNo, then count[groupNo+1]++
每当出现特定组号的元素时，就把count[组号+1]的元素的值加1；

count[] <=> groupNoPlus1ToGroupSizeArr[]

#2 把频率转换成为索引；
目标：计算出 每个键 在最终排序结果中的起始索引位置；
手段：从左往右，把当前groupNo上的groupSize给累加到下一个groupNo上；
结果：groupNoPlus1ToGroupSizeArr => groupNoToItsStartIndexArr[]
特征：这就是为什么在#1中，出现了诡异的groupNo+1

#3 得到有序的辅助数组aux；
目标：根据原始数组a[], 得到一个有序的辅助数组aux[];
手段：对于原始数组a[]的当前元素，使用 groupNoToItsStartIndexArr[] 来 确定 它会被排定到 aux[]的具体位置；
用法：
    对于 Anderson，他组号是2，startIndex是3. 所以他会被放在 aux[3]的位置上；
    🐖 放置完成后，把groupNo所对应的startIndex+1. 这样下次遇到同一组号的元素时，就能够以正确的方式顺序放置。
    对于Brown，他的组号是3，startIndex是8，所以它会被放在 aux[8]的位置上；
        groupNoToItsStartIndexArr[3] = 8 + 1;
    对于Davis，他的组号是3，startIndex是9，所以他会被放在 aux[9]的位置上
    so on and so forth...
特征：同一组号的多个元素，在排序后会被聚集到一起，但是相对顺序没有变化。

#4 把有序的辅助数组aux中的元素 回写到 原始数组中，完成对原始数组的排序；
