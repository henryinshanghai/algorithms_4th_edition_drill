高位优先的字符串排序的基本思想是很有效的：
在一般的应用中，只需要检查若干个字符 就能够完成 所有字符串的排序。
换句话说，这种方法能够 快速地 把需要排序的数组 切分成 较小的子数组 集合。

但这种切分 是一把双刃剑：我们肯定会需要处理 大量的微型数组 - 所以必须要能够快速地处理它们。

小型子数组 对于 高位优先的字符串排序的性能 至关重要。
我们在 其他的递归排序算法中 也遇到过这种情况（快速排序 和 归并排序），
但是 小数组 对于高位优先的字符串排序的 影响更加强烈。

例如，你需要将数百万个 不同的ASCII字符串（R=256）排序 并且 你对小数组不做任何的处理。
则：每个字符串 最终都会产生一个 只含有它自己的子数组 - 这样你就会需要 把数百万个 大小为1的子数组 排序。
而每次排序 都需要 把keyToItsStartIndex[]中的258个元素 初始化为0，并将它们转化为索引。
这个操作的代价 比起 排序的其他部分 要高很多。

在使用Unicode（R=65536），排序过程可能会减慢上千倍。
事实上，正因如此，许多使用排序 但考虑不周的程序，在从ASCII切换到Unicode后，
运行时间会从几分钟暴涨到几小时。

综上，将小数组切换到插入排序 的做法 对于 高位优先的字符串排序算法是必须的。
为了避免 重复检查 已知相同的字符 所带来的成本，我们使用 如下版本的插入排序👇
略
（对 “前面d个字符都相同的字符串”，执行插入排序）

它接受一个 额外的参数d，并假设 所有需要排序的字符串的前面d个字符 都是相同的。
这段代码的效率取决于 substring()方法 所需要的时间 是不是为常数。// 🐖 网站上并没有使用substring()的方式

和快速排序以及归并排序一样，一个较小的转换阈值 就能够将性能提高很多，
对于 高位优先的字符串排序算法，它所节约的时间更是非常可观。

如图显式了一个 典型应用中的实验结果。
在长度小于等于10时，将子数组 切换到 使用插入排序，能够将运行时间 降低为原来的1/10.

===
等值键

高位优先的字符串排序 中的第二个陷阱就是，对于 含有大量等值键的子数组 进行排序时，会比较慢。
如果相同的子字符串出现得太多，则：切换排序方法的条件 就不会出现 - 递归方法就会检查 所有相同键中的每一个字符。

另外，键索引计数法 无法有效判断 字符串中的字符是不是完全相同：
它不仅需要检查每个字符、移动每个字符串，还需要 初始化所有的频率统计，并 把它们转化为索引等。

因此，高位优先的字符串排序 的最坏情况就是 所有的键都相同。
大量 “含有相同前缀的键” 也会产生同样的问题，而这在一般的应用场景中是很常见的。