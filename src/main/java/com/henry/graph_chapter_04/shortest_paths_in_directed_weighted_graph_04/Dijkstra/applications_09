== 给定两点的最短路径 ==
给定 一幅加权有向图，以及 一个起点s 和 一个终点t，找到 从s到t的最短路径。

思路：要解决这个问题，可以使用 Dijkstra算法 并 在 从优先队列中获取到t 之后，终止搜索。

== 任意顶点对之间的最短路径 ==
给定 一幅加权有向图，回答“给定一个起点s 和 一个终点t，是否存在 一条从s到t的路径？
如果有，找到最短的那条路径” 等类似问题

如下代码解决了 任意顶点对之间的最短路径问题，
它 所需要的时间和空间 都 与EVlogV成正比。
它 构造了 DijkstraSP对象的数组，每个元素 都将相应的顶点 作为起点。

在 用例进行查询 时，代码 会访问 起点所对应的单点最短路径对象，并 把“目的顶点” 作为参数 进行查询。

== 欧几里得图中的最短路径 ==

在 顶点为平面上的点 且 边的权重 与 顶点“欧几里得间距”成正比 的图中，
解决 单点、给定两点和任意顶点对之间的 最短路径问题。

在这种情况下，有一个 小小的改动 可以 大幅提高Dijkstra算法的 运行速度（联系4.4.27）。

如图显示的是 Dijkstra算法 在处理 由测试文件mediumEWD.txt所定义的 欧几里得图 时，
使用 不同的起点 来 产生 最短路径树的过程。

和之前一样，这幅图中的线段 都表示 双向的有向边。
这些图片 展示了 一段引人入胜的动态过程。

下面，我们会考虑 加权无环图中的最短路径算法 并且 将在线性时间内 解决此问题（比起 Dijkstra算法更快）。
然后是 “负权重的”加权有向图中的 最短路径问题，而 Dijkstra算法 不适用于 这种情况。

