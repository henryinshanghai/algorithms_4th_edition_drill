#1 对于任何一个结点u，按照定义，low[u]的最终值
在 其所有子节点 DFS完成之前，都是不确定的。
这就是为什么 对low[u]值的更新 是发生在 DFS调用完成之后的。

#2 DFS的路径扎到最深的时候（返回之前），这时候
结点的dfn值 和 low值必然是相等的。
因为两个变量的初始值就是相等的，且 没有发生过变化。

#3 在沿着路径往回回溯时，路径上 任意节点的low[u]都可能会变小
- 如果路径回溯时，遇到了强连通图（aka 出现了返祖边）
因为这种情况下，算法会使用 dfn值最小的结点的dfn值 来 更新low[u].

#4 看起来对于 当前结点u， low[u]并没有通过 简单的
min(low[u], 其所有可达的结点中的 最小的low[v]) 来 计算，。
因为 按照定义，它是 min(所有可达顶点中 最小的dfn[v])

#5 如果当前节点u 存在有返祖边，则：
low[u] = dfn[其祖先节点]， 而 dfn[其祖先节点]的值 肯定是 小于 dfn[u]的。

#6 随着结点在路径中的回溯，强连通图中，所有结点的low值 最终都会变成 dfn[其祖先节点]。
no，路径中，只有到祖先节点之前的所有结点，其low值才会被更新。
🐖 结点在完成之前，其low值是不确定的。

#7 直到祖先节点被处理完成。
这时候 如果对于 祖先节点a 来说，dfn[a] = low[a],
说明 它不存在 任何一个子节点 存在有 指向结点a祖先的边。
进一步说明 结点a 就是 当前SCC的入口结点。
则：借助一个显式的栈 来 打印出SCC中的所有结点。

#8 对于图中的每一个SCC来说，离开它的边，就不会再回来了。
这个性质 保证了 图中的每个SCC都是唯一的。