===
再谈可达性

在无向图中，如果两个顶点v和w是连通的，则：既存在一条从w到v的路径，也存在一条从v到w的路径；
在有向图中，如果两个结点v和w是强连通的，则：既存在一条从w到v的路径，也存在一条从v到w的路径；
对于一对 非强连通的顶点呢？
#1 存在v->w的路径；
#2 存在w->v的路径；
#3 两条路径都不存在。

== 顶点的可达性 ==
给定一幅有向图，回答“是否存在 一条从一个给定的顶点v 到 另一个给定的顶点w的路径”等类似问题。

对于无向图来说，它 等价于 连通性问题；
但对于有向图来说，它和 强连通性问题 有着很大的区别；

ConnectedComponents类 需要“线性级别的预处理时间” 才能够 支持 常数时间的查询操作。
我们能够 在有向图的相应实现中，达到这样的性能吗？
这个看似简单的问题，困扰了专家数十年。

为了更好地理解这个问题（有向图中的回答结点间连通性的问题），我们来看一下这张图片（略）
它展示了下面这个基本概念：

定义：有向图G的“传递闭包” 是 由“相同的一组顶点”所组成的 另一幅有向图。
当且仅当 在G中w是从v可达(v->w)的时侯，在G的传递闭包中，才会存在有一条 从v指向w的边(v->w).

根据约定，每个顶点对于自己 都是可达的，因此 传递闭包 会包含有V个自环。
“示例有向图” 只有22条有向边（13个结点），但是 它的传递闭包 却包含 所有可能的169条有向边(结点->结点的矩阵组合 13*13)中的102条。

结点指向其他结点的矩阵图
指出(depart)节点v \ 指入(terminal)结点 w | * * *
_
.
.
.

“传递闭包”（矩阵图）中的有向边分类：
#1 顶点自己所形成的闭环 - 在矩阵的从左上往右下的对角线上，用灰色的T表示；
#2 原始有向图中的边 - 在矩阵中用红色的T表示；
#3 经由有向路径所达到的结点 - 在矩阵中用黑色的T表示。

一般来说，一幅 有向图中的传递闭包 中所包含的边，相比于原图，都要多得多。
比如，一幅稀疏图 的传递闭包 却是一幅 稠密图 是很常见的。
例如，含有V个顶点和V条边的“有向环” 的“传递闭包” 是一幅 含有V^2条边的“有向完全图”。

因为“传递闭包” 一般都很稠密，我们通常会 把它们表示成为 一个“布尔值的矩阵”，
当且仅当 w是从v可达的时候（v->w），其中v行w列的值为ture(v, w)。

与其明确计算 一幅“有向图的传递闭包”，不如
使用深度优先搜索 来 实现表中的API。（这话从何讲起???）