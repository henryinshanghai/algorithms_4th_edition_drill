== 与其明确计算 一幅“有向图的传递闭包”，不如 使用DFS 来 实现表中的API。（这话从何讲起???）==

“顶点对的可达性”的API
    class TransitiveClosure
    TransitiveClosure(Digraph G)    用于预处理的构造函数
    boolean reachable(int v, int w)  w是从v可达的吗？

如下的代码 使用 DirectedDFS 简明地实现了它。
无论 对于稀疏图还是稠密图，它都是理想的解决方案，但它不适用于 在实际应用中可能会遇到的大型有向图，
因为 构造函数所需要的空间 和V^2成正比，而所需要的时间 和 V(V+E)成正比：
解释：
    共有V个 DirectedDFS对象，每一个对象 所需要的空间 都与V成正比（它们都会
    含有 大小为V的marked数组，并且会检查 E条边 来 计算标记）。

本质上讲，TransitiveClosure 会通过计算G的传递闭包 来 支持常数时间的查询，
传递闭包矩阵中的第v行 就是 TransitiveClosure类中的 DirectedDFS[]数组中的第v个元素的marked[]数组。

我们能够大幅度减少 “预处理所需要的时间和空间”，同时又能够保证 “常数时间的查询”吗？
用“远小于平方级别的空间” 来 支持“常数级别的查询” 的一般解决方案 仍然是一个 有待解决的研究问题，并且它 具有非常重要的实际意义：
比如，除非这个问题得到解决，否则：
对于像 “代表互联网这样的巨型有向图”，我们无法 有效地解决 其中的 “顶点对可达性问题”。