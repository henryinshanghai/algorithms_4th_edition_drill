--- 对二叉查找树中 与有序性相关的操作 的性能分析 ---
概念：树的高度 aka 树中任意结点的最大深度。
结论：在一棵二叉查找树中，所有操作（除了范围查找，它的成本与合法键的数量成正比） 在最坏情况下的执行所需要的时间 与树的高度成正比；
证明：树的所有操作 都是沿着树的一条(或者两条)路径进行的。根据定义/概念，树中路径的长度 不可能大于 树的高度。

目标：计算最坏情况下，树的高度到底有多高？
这个证明比较困难，但以下罗列出了一些结论👇
#1 使用随机键构造的二叉查找树，其平均高度 是 树中结点数N的对数级别（J. Robson）；
#2 对于足够大的N，BST树的平均高度趋近于 2.99lgN;

综上，我们可以认为 使用随机键构造出的BST中，所有路径的长度都小于3lgN.
衍生问题：如果用来构造BST的键不是随机的呢？那还会有这种 对树的高度的保证吗？
答：我们可以使用 新的逻辑数据结构“平衡二叉查找树” - 它能够保证无论键的插入顺序如何（随机模型或者其他），树的高度都总会是 总键数的对数。

