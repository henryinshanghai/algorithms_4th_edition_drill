使用二叉查找树为数据结构的算法，其运行时间取决于 树的形状。
而二叉查找树的形状 又取决于 结点被插入到二叉树中的先后顺序。

最好的情况下的二叉查找树（完全平衡）：
特征：每条空链接 到根节点的距离都是 ~lgN;

最坏情况下的二叉查找树（倾斜成为单向链表）：
特征：这种情况下，搜索路径中可能会有N个结点。

试试：一般情况下二叉树的形状 与 最好情况下二叉树的形状更接近。

--- 随机模型下，对二叉查找树的分析 ---
假设：键的分布是均匀随机的 / 键的插入顺序是随机的。
在这种假设下， 二叉查找树 与 快速排序 之间存在很多相似性👇

-- 二叉树中的根节点 & 快速排序中的第一个切分元素 --
根节点的特性：左子树中结点的值 < 根结点的值 < 右子树中结点的值
切分元素的特性：左半区间中的元素 <= 切分元素 <= 右边区间中的元素

-- 二叉树结构的递归特性 & 快速排序中，对子数组的递归排序 --
二叉树的递归特性：任意一棵树的根结点 就能够 代表这棵树本身 - 左子结点就能表示左子树、右子节点就能表示右子树；
快速排序中的递归：在排定一个切分元素后，对左半区间、右半区间分别进行 快速排序；

命题：对于一个 由N个随机键构造的二叉查找树，{一次命中的查找&一次未命中的查找&一次插入操作}
平均所需要的比较次数为 ~2*lnN（约为1.39lgN）.

-- 与二分查找的对比 --
对于查找操作，BST中查找随机键的成本 比起 二分查找要高39%；
但是这些多出来的成本是值得的，因为 插入一个新键的成本是对数级别的（这一点有序数组做不到，它的插入操作是线性级别的）

🐖 比较次数的标准差很小，因此N越大，这个公式(1.39lgN)越准确。
