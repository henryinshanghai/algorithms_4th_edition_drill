== 使用“有颜色的链接” 来 在BST中表示23树中的3-结点，从而得到“红黑树”这种数据结构 ==
手段：把树中的链接分成两种类别 👇
    1 红链接 - 用于把两个2-结点连接起来，形成一个3-结点；
    2 黑链接 - 用于表示23树中的普通链接。

红黑树的具化（左倾红黑树），我们把23树中的3-结点 表示为 BST中 由一条“左斜的红色链接”所连接的两个结点。
副作用（好处）：使用上述 对3-结点的表示方式，红黑树中的get()方法实现 与 标准二叉查找树中的get()方法的实现 会完全一样；
衍生作用：在红黑树中，我们可以使用结点的链接信息 来 表示它是不是一个23树中的3-结点。
应用：用于建立 23树 与 红黑树之间的等价关系。aka
    对于任意的23树，只要对结点进行转换，我们就能够马上派生出（derive）一棵 它所对应的二叉查找树。

== 红黑树的另一种定义（从添加约束的BST视角） ==
如果一个二叉查找树 包含有红黑链接 并 满足如下约束 👇
    关于红链接的约束：#1 所有的红链接都是左链接；#2 没有任何一个结点同时与两条红链接相连接；
    关于平衡性的约束：#3 树是完美黑色平衡的 aka 从任意空链接到根结点的路径，所有路径上的黑链接数量相同。
则，称之为红黑树。

结论：满足以上约束的红黑树 与 相应的23树 是一一对应的（因此具有平衡性）。

== 一一对应关系(correspondence) ==
从红黑树 得到 其对应的23树的步骤：
    #1 把红黑树中所有的红链接画平；
    #2 把 由红链接所连接的两个结点 进行合并 作为23树中的3-结点，把其他的结点视为2-结点 => 就会得到一棵2-3树。

从2-3树 得到 其所对应的红黑树的步骤：
    把3-结点画作为 由红色左链接相连接的两个2-结点；

按照 ”23树中的3-结点 = 红黑树中由红色左链接连接的两个2-结点“的规则，可以推论：
    红黑树既是 二叉查找树，又是2-3树。

衍生结论：
如果我们能够在保持一一对应关系的基础上，实现“2-3树的插入算法”。那么 我们就能够把两种算法的优点结合起来
    {二叉查找树中的高效的“search()方法” & 2-3树中高效的“平衡插入算法”}

