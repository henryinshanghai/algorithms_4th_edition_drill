== 向23树中添加新键时的各种情形 ==

-- #1 向单个2-结点中插入新键 --
向只有一个结点（且结点为2-结点）的红黑树中，插入新键。
🐖 为新键创建新节点时，结点总是以红链接依附到其父节点上。

如果新的键 小于已经存在的键，说明 新节点会是 已经存在的结点的左子结点。则：
    为新的键创建一个新的结点，然后使用红链接连接到 已经存在的结点即可 => 等价于一个3-结点
如果新的键 大于已经存在的键，说明 新节点会是 已经存在的结点的右子节点。则：
    新增红色结点后，会产生一个红色的右链接。这种情况 违反了红黑树的约束（不能存在红色的右链接）
    解决手段：对红色右链接的父节点进行左旋转，从而得到红色左链接（合法）；
    具体代码： root = rotateLeft(root);
    旋转操作完成后，我们就得到了一个 合法的红黑树（能够等价为一棵2-3树）

最终得到的红黑树，都等价于一个3-结点。

-- #2 向单个3-结点中插入新键 --
过程：略 参考👇

-- #3 向“红黑树底部的结点”中插入一个新键 --
🐖 为了维持红黑树的有序性，新键会被插入到树的底部。

分类讨论：
① “新键结点”的父节点是一个2-结点：
    则：#1中讨论的两种情形都适用👇
    如果新节点是原始2-结点的左子结点，则：直接得到一个3-结点；
    如果新结点 是原始2-结点的右子结点，则：产生一个红色的右链接，需要执行旋转操作，将之转换为红色的左链接。

② “新键结点”的父节点是一个3-结点：
    则：可能会有如下3种情况（等价于临时的4-结点）👇
    Ⅰ 新结点是 3-结点的右子结点；
        则：会产生一个红色的右链接（违反红黑树约束），但树本身是平衡的。
        手段：把左右子链接的颜色从红色变成黑色，从而得到一个 由三个2-结点组成、高度为2的平衡树（2-3树）。
    Ⅱ 新结点是 3-结点的左子结点；
        则：会产生连续的红链接（左 - 左 违反了红黑树约束）。
        手段：对上层的红色左链接的父节点进行右旋转，从而得到Ⅰ中的情形；
    Ⅲ 新结点是 3-结点的中子结点；
        则：会产生连续的红链接（左 - 右 违反了红黑树约束）
        手段：对下层红色右链接的父节点进行左旋转，从而得到Ⅱ的情形。
    总之，使用0次、1次与2次旋转操作 & 颜色变化的操作，就能够在插入结点后，得到合法的红黑树。