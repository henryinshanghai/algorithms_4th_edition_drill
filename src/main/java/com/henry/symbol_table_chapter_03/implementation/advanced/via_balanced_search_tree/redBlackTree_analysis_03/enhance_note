练习：在我们的标准索引测试用例中插入键P，并画出插入过程中的每次变换（颜色转换或者旋转）后的红黑树；

-- 红黑树的最坏情况 --
构造出一棵大小为N的最差红黑树 - 树中，从根节点到几乎所有空链接的路径长度都是 2lgN;

-- 自顶向下的2-3-4树 --
尝试 使用平衡2-3-4树作为底层数据结构 来 实现符号表的基本API。
手段：在树的表示中，使用红黑链接 并 实现正文所描述的插入算法 👇
    #1 在沿着查找路径向下的过程中分解4-结点，并进行颜色转换；
    #2 在沿着查找路径向上的过程中，将4-结点配平。

-- 自顶向下一遍完成 --
要求(特征)：在沿着查找路径向下的过程中，分解并平衡4-结点（以及3-结点）。
作用：这样就能够在树底直接插入新键就可以了。

-- 自底向上的2-3-4树 --
尝试 使用平衡2-3-4树作为底层数据结构 来 实现符号表的基本API。
手段：在树的表示中，使用红黑链接 并 使用和算法3.4相同的递归方式 来 实现自底向上的插入。
特征：插入方法应该只需要 去分解“查找路径底部的4-结点”（如果存在的话）

-- 缓存 --
修改RedBlackBST的实现：把最近访问的结点Node 保存在一个变量中。
作用：get()或者put()方法，当再次访问同一个键的时候，就只会需要常数时间了。

因为默认的contains()的实现中 调用了get()，所以 CountWordFrequencyViaSymbolTable 的内循环中，会把同一个键查找两三遍：
if(!symbolTable.contains(word)) symbolTable.put(word, 1);
else                            symbolTable.put(word, symbolTable.get(word) + 1);

为了能够提高这样的用例代码的效率，我们可以使用一种叫做“缓存”的技术手段 - 把“访问最频繁的键”的位置 保存到一个变量中。
修改 SequentialSearchST 与 BinarySearchST 来 实现这个idea。

-- 旋转的基础定理 --
请证明，使用一系列左旋转或者右旋转 就可以将一棵二叉查找树tree01 转换为 “由同一组键生成的”其他任意一棵二叉查找树tree02.

-- 其他的常见API --
#1 删除最小键；
#2 删除最大键；
#3 删除操作；
