-- 红黑树插入算法的具体实现 --
原理：
#1 因为 要维持/实现 “对称有序性”，所以 所有的插入动作 都会结束于 红黑树的叶子节点；
#2 所有 为了维护“合法的红黑树(① 红链接约束 + ② 黑色平衡性)”的局部操作，都发生在 结点的插入动作（递归调用） 之后；
#3 结点插入 后，维护“红黑平衡树”的局部操作 会沿着 查找路径，从下往上地进行（直到遇到2-结点 或 根结点）。

基于以上原理，为了实现 插入算法，我们可以：
    在put()方法的递归调用之后（也就是return之前） 来 添加这些“用于维护红黑树平衡性的局部操作”。
实现代码：
    RedBlackTreeLiteSymbolTable.insert()