#Q1 感觉上，2-3树中的3-结点 等价于 红黑树中的红色左链接 没有任何的实质依据。
为什么红黑树中 不能够存在 红色右链接？以及4-结点呢？

回答：它们都是允许出现的。
之所以 在文章中 只允许存在 红色的左链接，是因为这样 能够减少 可能出现的情况。实现时 所需的代码 会少很多

#2 对于 不同类型的结点(2-结点、3-结点、4-结点)，为什么不能 在Node类中 使用一个Key[] containedKeyArray 来 表示它们？

答：这是一个好的想法，B-树 其实就是这么实现的，使用这种方式 可以使得 一个结点中存储更多的键。
但因为 2-3树中的结点 存储键 比较少，所以 数组带来的额外开销 相比之下 就显得太高了。

#3 在 对一个4-结点 进行分解 时，我们有时候会 在rotateRight()中 把右节点的颜色 设为红色，并
随即 用flipColors() 把它的颜色 又变成黑色。这不是纯纯多余吗？

答：的确，有时候我们会 不必要地 反复改变 树中结点的颜色。
但是总体来看，“多余的几次颜色变换”的成本 与 “将所有方法的运行时间的增长数量级从线性级别提升到对数级别”的收益 不是一个数量级的(一本万利)。

当然 在“对性能有要求的应用”中，你可以 将 rotateRight() 和 flipColors()的代码 在需要的地方展开(啥意思?) 来 消除那些额外的开销。
在 删除算法 中，我们仍旧会使用 这两个方法。
对于 “保证树的完美平衡”这个目标 来说，这两个方法 更加容易使用、理解和维护。