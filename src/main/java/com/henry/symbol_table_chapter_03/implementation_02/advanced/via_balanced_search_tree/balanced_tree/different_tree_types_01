#1 二叉查找树(BST)在添加、删除结点的过程中会失衡，从而导致性能下降；
#2 想要保持性能，就需要 在添加、删除结点时，动态调整树的结构 来 维持平衡；
#3 AVL树 是高度平衡的二叉查找树，其子树高度差不超过1；
#4 AVL树 通过旋转操作 来 维持 添加、删除节点后 树的平衡性；
#5 AVL树 适用于 添加、删除操作较少，而查询操作 较多的场合；
#6 红黑树的平衡标准 低于AVL树，其红色节点 不计入 子树高度；
#7 红黑树避免了 AVL树的某些旋转操作，因此 提高了 添加、删除的效率；
#8 红黑树 是由 234树转换而来的，因此 与234树遵循相同的原理。