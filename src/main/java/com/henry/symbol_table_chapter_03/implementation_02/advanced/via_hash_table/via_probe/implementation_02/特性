删除操作

怎么样能够 从 基于线性探测的散列表中 删除一个键呢？
仔细想一下，就会发现 直接将待删除键 所在位置设置为null 是不可行的。
因为这会使得 在此位置之后的元素 无法被查找。

因此，我们需要 把簇中 被删除键右侧的所有键 都重新插入到散列表中。
这个过程比想象地要复杂，最好使用练习（从散列表中删除指定键） 来 跟踪代码运行的全过程。

和拉链法一样，开放地址类别的散列表的性能也依赖于 α=N/M的比值，但是意义有所不同。
我们把α称作  散列表的使用率。

对于基于拉链法的散列表，α是每条链表的长度，因此 一般会大于1；
对于基于 线性探测的散列表，α是表中已被占用的空间的比例，它是不可能大于1的。
事实上，在 LinearProbingHashST的符号表实现中，我们不会允许 α达到1（散列表被占满），
因为这种情况下，未命中的查找操作 会导致 无限循环。

为了保证性能，我们会动态调整数组的大小 来 保证使用率在1/8到1/2之间。
这个策略基于数学上的分析，我们会在 讨论实现细节之前介绍。