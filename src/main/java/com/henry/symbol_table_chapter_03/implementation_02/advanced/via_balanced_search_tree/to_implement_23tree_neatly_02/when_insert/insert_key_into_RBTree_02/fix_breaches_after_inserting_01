== 向23树中 添加新键时 的各种情形 ==

-- #1 向 单个2-结点 中 插入新键 --
向 只有一个结点（且结点为2-结点）的红黑树 中，插入新键。
🐖 为新键 创建新结点 时，结点总是 以 红链接 依附到 其父节点上。

如果 新的键 小于 已经存在的键，说明 新节点 会是 已经存在的结点的左子结点。则：
    为 新的键 创建一个 新的结点，然后 使用红链接 连接到 已经存在的结点即可 => 等价于一个3-结点
如果 新的键 大于 已经存在的键，说明 新节点 会是 已经存在的结点的右子节点。则：
    新增 红色结点 后，会产生一个 红色的右链接。这种情况 违反了红黑树的红链接约束（不能存在红色的右链接）
    解决手段：对 红色右链接的父节点 进行左旋转，从而得到 红色左链接（合法）；
    具体代码： root = rotateLeft(root);
    旋转操作 完成后，我们就得到了一个 合法的红黑树（能够等价为 一棵2-3树）

最终得到的红黑树，都等价于一个3-结点。

-- #2 向 单个3-结点 中 插入新键 --
过程：略 参考👇

-- #3 向 “红黑树底部的结点” 中 插入一个新键 --
🐖 为了维持 红黑树的有序性，新键 会被插入到 树的底部。

分类讨论：
① “新键结点”的父节点 是一个 2-结点：
    则：#1中讨论的两种情形 都适用👇
    如果 新节点 是 原始2-结点的左子结点，则：直接得到一个 3-结点；
    如果 新结点 是 原始2-结点的右子结点，则：产生一个 红色的右链接，需要执行 旋转操作，将之转换为 红色的左链接。

② “新键结点”的父节点 是一个 3-结点：
    则：可能会有如下3种情形（等价于 临时的4-结点）👇
    Ⅰ 新结点是 3-结点的右子结点；
        则：会产生 一个红色的右链接（违反 红链接约束#1），但树本身是 平衡的。
        手段：把 左右子链接的颜色 从红色变成黑色，从而得到一个 由三个2-结点组成、高度为2的平衡树（2-3树）。
    Ⅱ 新结点是 3-结点的左子结点；
        则：会产生 连续的（左-左）红链接（违反了 红链接约束#2）。
        手段：对 上层的红色左链接的父节点 进行右旋转，从而得到 Ⅰ中的情形；
    Ⅲ 新结点是 3-结点的中子结点；
        则：会产生 连续的（左-右）红链接（违反了 红链接约束#1&#2）
        手段：对 下层红色右链接的父节点 进行左旋转，从而得到 Ⅱ的情形。

结论：总之，使用0次、1次与2次旋转操作 + 颜色变化的操作，就能够 在插入结点后，得到 合法的红黑树。