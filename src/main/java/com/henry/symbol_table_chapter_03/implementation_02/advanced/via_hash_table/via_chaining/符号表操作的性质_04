性质：在一张含有M个链表 和 N个键的散列表中， 未命中查找 和 插入操作 所需要的比较次数为 ~N/M.

例证：
在实际应用中，散列算法的高性能 并不需要 散列函数完全符合假设J意义上的均匀性。
从20世纪50年代以来，无数程序员都见证了 命题所预言的性能改进 - 即使有些散列函数不是均匀的，命题也成立。

比如 FrequencyCounter所使用的散列表(其hash()方法是基于Java的String类型的hashCode()方法)
中的链表长度 和 理论模型 完全一致。

这条性质的例外之一是：
在许多情况下，散列函数没有能够 使用键中的所有信息，并由此导致的性能低下。

除此之外，大量经验丰富的程序员 所给出的应用实例 使我们确信：
在基于拉链法的散列表中，使用大小为M的数组 能够 将查找和插入操作的效率 提高 M倍。

SeparateChainingSymbolTable 相比于 LinkedNodeSymbolTable符号表实现 操作的效率就提升了997倍