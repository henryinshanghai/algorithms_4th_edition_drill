如果所有的键都是小整数，我们可以用一个数组 来 实现无序的符号表；
手段：#1 把数组的索引作为键； #2 把数组元素的值 作为 键所关联的值。
作用：我们就能够快速访问 任意键所关联的值。
难点：我们需要 使用算术操作 来 把键转化为数组的索引，从而访问到数组中的键值对。

使用散列的查找算法 分为两步：
#1 第一步：使用散列函数 把被查找的键 转化成为 数组的一个索引；
理想情况下，不同的键 都能转化为 不同的索引值。
当然，这只是理想情况，因此 我们会面对 两个或者多个键 被散列到 相同索引值的情况。

#2 第二步：处理碰撞的情况；

在描述了多种散列函数的计算后，我们会学习两种解决碰撞的方法：拉链法 和 线性探测法；

散列表 是算法在时间和空间上做出权衡的经典例子。
如果没有内存的限制，我们可以直接 把键作为 数组的索引，则：所有的查找操作都只需要 访问内存一次。

另一方面，如果没有时间限制，我们可以 使用无序数组并进行顺序查找 - 这样就只需要很少的内存。

而散列表使用了适度的空间和时间，并在这两种极端之间找到了一种平衡。

事实上，我们不必重写代码，只需要调整散列算法的参数 就能够 在空间和时间上做出取舍。
我们会使用概率论的经典结论 来 帮助我们选择合适的参数。

概率论是数学分析的重大成果。虽然他不在本书的讨论范围之内，但是我们 将要学习的散列算法 利用了这些知识。
这些算法虽然简单但是应用广泛。
使用散列表，你可以实现 在一般应用中 拥有（均摊后）常数级别的查找 和 插入操作的符号表。
这使得它在很多情况下，成为 实现简单表的最佳选择。

