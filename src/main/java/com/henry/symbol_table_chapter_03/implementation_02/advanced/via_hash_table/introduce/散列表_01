如果 所有的键都是 小整数，我们可以用一个数组 来 实现无序的符号表；
手段：#1 把 数组的索引 作为键； #2 把 数组元素的值 作为 键所关联的值。
作用：我们就能够 快速访问 任意键所关联的值。
难点：我们需要 使用算术操作 来 把 键 转化为 数组的索引，从而 访问到 数组中的键值对。

“使用散列的查找算法” 分为两步：
#1 第一步：使用 散列函数 把 被查找的键 转化成为 数组的一个索引；
理想情况下，不同的键 都能转化为 不同的索引值。
当然，这只是理想情况，因此 我们会面对 “两个或者多个键 被散列到 相同索引值”的情况。

#2 第二步：处理“碰撞”的情况；

在描述了多种 散列函数的计算 后，我们会学习 两种解决碰撞的方法：① 拉链法 和 ② 线性探测法；

散列表 是算法 在时间和空间上做出权衡 的经典例子。
如果没有 内存的限制，我们可以直接 把键作为 数组的索引，则：所有的查找操作 都只需要 访问内存一次。
另一方面，如果没有 时间限制，我们可以 使用无序数组 并 进行顺序查找 - 这样就只需要 很少的内存。

而散列表 使用了 适度的空间和时间，并 在这两种极端之间 找到了一种平衡。

事实上，我们 不必重写代码，只需要 调整散列算法的参数 就能够 在空间和时间上做出取舍。
我们会使用 概率论的经典结论 来 帮助我们选择 合适的参数。

概率论 是 数学分析 的重大成果。虽然他不在本书的讨论范围之内，但是我们 将要学习的散列算法 利用了这些知识。
这些算法 虽然简单但是应用广泛。
使用散列表，你可以实现 在一般应用中 拥有（均摊后）常数级别的查找 和 插入操作的符号表。
这使得它在很多情况下，成为 实现简单表的最佳选择。

