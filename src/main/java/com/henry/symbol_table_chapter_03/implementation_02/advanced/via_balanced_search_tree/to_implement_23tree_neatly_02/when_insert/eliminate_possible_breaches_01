== 红黑树 是 添加了约束的BST；==
具体约束(为什么有这些约束?)：
    红链接约束：#1 所有的红链接都是左链接；#2 没有任何一个结点同时与两条红链接相连接；
    关于平衡性的约束：#3 树是完美黑色平衡的 aka 从任意空链接到根结点的路径，所有路径上的黑链接数量相同。

🐖 在红黑树中插入新的key时，我们会把 待插入的key 以独立的红色结点 依附到叶子节点上。
原理：新添加的红色结点不会破坏 红黑树的“平衡性约束”；
特征：新添加的红节点 可能会破坏 红黑树的“红链接约束”；

目标：在插入key后，维护红黑树所要满足的约束(从而保持与23树的一一对应关系)；
-- 手段#1：旋转操作（rotation） --
作用：用于改变红链接的指向。
应用：修复树中出现的“红链接约束breach”，使之成为一棵“合格的红黑树”；
具体实现：
    方法接受 一条指向某个结点的链接 作为参数。
    如果 结点的右链接是红色的，则：对结点（的右链接）执行左旋转操作；
        rotateLeft()会 对树进行必要的调整 & 返回一个 包含同一组键的子树并且左链接为红色的根结点（的链接）。
特征：从表现上来看，我们只是把 “用两个键中的较小者作为根结点” 改变为 “用较大者作为根结点”。

-- 辅助操作：在旋转操作完成后，重置 指向父节点的链接--
目标：使用旋转操作后得到的子树 来 替换原始的子树；
手段：
    #1 保持原始子树的（指向）根结点的链接的颜色；
        具体做法（h表示原始子树的根结点、x表示旋转后子树的根结点）：x.color = h.color;
    #2 替换原始子树；
        h = rotateLeft(h); // 使h指向 旋转后的子树的根结点 / 把旋转后的子树的根结点 赋值到 指向原始子树的变量上
特征：代码的简洁性。
应用：使得旋转操作 成为了 普通插入操作的一个简单补充。

结论：在插入新的键后，我们可以 使用旋转操作 来 帮助我们保证 2-3树 和 红黑树之间的一一对应关系。
原理：旋转操作 保持了 红黑树的两个重要性质 {有序性 & 完美平衡性}。所以在进行旋转操作时，不会breach这两个特性/约束。

-- 手段#2 颜色转换（flipColor）--
作用：转换某个结点的两个红色子节点的颜色；
应用：消除“向3-结点的中键插入新结点（红色）” 所引入的 “红色右链接breach”;
特征：
    #1 父节点的颜色也会同步变成红色；
    #2 是一个局部变换，不会影响到树的黑色平衡性。