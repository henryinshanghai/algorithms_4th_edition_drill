--- 目标：把一个4-结点分解成为一棵2-3树 ---
特征：统共有六种情况；
    1 4-结点作为根结点；
    2 4-结点作为2-结点的子节点 - 左子结点、右子节点；
    3 4-结点作为3-结点的子节点 - 左子结点、中子节点、右子节点

结论：在2-3树的插入算法中，所有进行的变换操作 都只是局部的(partial);

-- 概念：--
局部变换：如果对2-3树的变换操作，满足如下特征👇，则：称其为 局部变换；
    1 除了相关的结点和链接之外，不会检查或者修改 树的其他部分；
    2 在每次变换中，所变更的连接数量不会超过一个很小的常数；
    3 在树的任何地方，只要符合相应的模式，变换都可以进行；
具体到对4-结点的breakdown变换 - 每次变换操作都会：
    1 把4-结点中的一个键送到它的父节点中；
    2 重构相应的链接；
    3 不会涉及到树的其他部分。

结论：对于2-3树来说，局部变换 不会影响到2-3树的全局有序性(order) 和 平衡性(balance);
也就是说，在变换完成后，2-3树仍旧满足 “任意空链接到根结点的路径长度 都是相等的”（平衡性约束）。

-- 对平衡性约束的分类讨论 --
#1 空链接到根结点的路径长度保持不变；
    满足此分类的具体变换：
        1 对作为3-结点的中子节点的4-结点做变换；
        2 把一个4-结点分解成为两个2-结点 & 将其父节点由2-结点变成3-结点 / 由一个3-结点变成临时的4-结点；

#2 空链接到根结点的路径长度全部+1；
    满足此分类的具体变换：
        1 当作为根结点的4-结点被分解成为3个2-结点时.

结论：总而言之，所有的局部变换都不会影响 整棵树的有序性&平衡性。
