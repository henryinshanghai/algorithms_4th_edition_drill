作为一个 具体的例子，我们来看一个 从文件或者网页中 提取”由逗号分隔的“信息的程序；
信息的格式 是 .csv文件。

csv格式 所存储的信息 不需要任何 专用的程序 就能够读取：
数据 都是 文本，每行中的各项都 由逗号隔开。

在 本书的网站 中，你会能够找到 很多的csv文件，它们与 刚刚提到过的领域 相关。
比如 amino.csv 密码子 和 氨基酸的编码关系
DIJA.csv 道琼斯工业平均指数 历史上每天的 开盘价、成交量和收盘价
ip.csv DNS数据库中 的一部分条目
upc.csv 广泛用于识别商品的 Uniform Product Code条形码

电子表格等 数据处理程序 都能够读写.csv文件，
我们的示例程序 说明你也能够 自己编写Java程序 来 根据需要 处理这些数据。

如下的LookupCSV程序 会：
① 根据 ”命令行所指定的文件“中的数据 来构建 一组键值对；
② 并会 打印出 从标准输入中读取的键 所对应的值。
命令行参数 包括 一个文件名 和 两个整数，分别用来指定 键和值所在的位置。

这个例子的目的 在于 展示符号表的作用 与 灵活性。
比如回答 如下问题：
#1 哪个网站的IP地址是 128.112.136.35?
www.cs.princeton.edu;

#2 哪种氨基酸对应着密码子TCA？
丝氨酸

#3 DIJA在1929年10月29日的价格是多少？
252.38

#4 哪种商品的条形码是 0002100001086？
卡夫芝士粉

有了LookupCSV 和 合适的csv文件，就能够 轻易地查找到 这类问题的答案。

🐖 在 处理交互性的查询 时，性能一般都 不是问题（因为计算机能够 在你打字的功夫 就检索上百万条信息）
所以 使用LookupCSV时，符号表的高效性 并不明显。
但是 当 程序 需要进行 大量查找操作时，符号表的性能 就很重要了。

例如，互联网上的一台路由器 每秒钟可能需要 查找上百万个IP地址。
在本书中，我们已经通过 FrequencyCounter 看到了 高性能的必要性。
在本节中，你还会看到 几个其他的例子。

练习中有几个 更加复杂的 处理.csv文件的测试用例。
例如，我们可以 将一个字典 动态化 -
① 允许它接受 从标准输入中得到的指令 来 改变一个键所绑定的值，
② 或者 为它添加 范围查找的功能，
③ 或者 我们可以 为同一个文件 来 构造多个字典。

代码：LookupCSV