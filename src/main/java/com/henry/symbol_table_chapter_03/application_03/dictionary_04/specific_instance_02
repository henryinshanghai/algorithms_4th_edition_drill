作为一个具体的例子，我们来看一个 从文件或者网页中提取 由逗号分隔的信息的程序；
信息的格式是.csv文件。

csv格式所 存储的信息 不需要任何专用的程序就能够读取：
数据都是文本，每行中的各项 都由逗号隔开。

在本书的网站中，你会能够找到很多的csv文件，它们与刚刚提到过的领域相关。
比如 amino.csv 密码子和氨基酸的编码关系
DIJA.csv 道琼斯工业平均指数 历史上每天的开盘价、成交量和收盘价
ip.csv DNS数据库中的一部分条目
upc.csv 广泛用于识别商品的 Uniform Product Code条形码

电子表格等 数据处理程序 都能够读写.csv文件，
我们的示例程序 说明你也能够编写Java程序 来 根据需要 处理这些数据。

如下的LookupCSV程序 会根据命令行指定的文件中的数据 来
构建一组键值对，并会 打印出由标准输入读取的键所对应的值。
命令行参数 包括 一个文件名 和 两个整数，分别用来指定 键和值所在的位置。

这个例子的目的在于 展示符号表的作用与灵活性。
回答如下问题：
哪个网站的IP地址是 128.112.136.35?
www.cs.princeton.edu;

哪种氨基酸对应着密码子TCA？
丝氨酸

DIJA在1929年10月29日的价格是多少？
252.38

哪种商品的条形码是 0002100001086？
卡夫芝士粉

有了LookupCSV和合适的csv文件，就能够轻易地查找到 这类问题的答案。

🐖 在处理交互性的查询时，性能一般都不是问题（因为计算机能够在你打字的功夫就检索上百万条信息）
所以 使用LookupCSV时，符号表的高效性并不明显。
但是 当程序需要进行大量查找操作时，符号表的性能 就很重要了。

例如，互联网上的一台路由器 每秒钟可能需要查找上百万个IP地址。
在本书种，我们已经通过 FrequencyCounter 看到了 高性能的必要性。
在本节种，你还会看到几个其他的例子。

练习中有几个更加复杂的处理.csv文件的测试用例。
例如，我们可以将一个字典 动态化 - 允许它接受从标准输入中得到的指令 来 改变一个键所绑定的值，
或者为它添加 范围查找的功能，或者 我们可以 为同一个文件 来 构造多个字典。

代码：LookupCSV