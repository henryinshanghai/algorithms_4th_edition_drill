下面这个例子展示的是 符号表在科学和数学计算领域中 所起到的作用。
我们会考察一种重要而常见的计算，它在典型的实际应用中 常常是 性能的瓶颈，
然后我们会演示 符号表 如何解决这个瓶颈，并能够 处理规模大得多的问题。

实际上，这个计算正是 xxx 发明的PageRank算法的核心 - 这个算犯法在2000年左右 造就了Google。
它同时也是一个 著名的数学抽象模型，在很多其他场景中都会用到。

我们要考察的简单计算 就是 矩阵和向量的乘法：
给定一个矩阵 和 一个向量，并计算结果向量 - 结果中 第i项的值 是 矩阵第i行和给定向量的点乘。
为了简化问题，我们只考虑 N行N列的方阵，向量的大小也是N。

在Java中，用代码实现这种操作非常简单，但是所需要的实践 和N^2成正比，
因为N维结果向量中的每一项 都需要计算N次乘法。
因为需要存储整个矩阵，所以 计算所需要的空间 也和N^2成正比。

在实际应用中，N往往非常巨大。
比如，刚刚提到的Google的应用中，N等于互联网中所有网页的总数。
在PageRank算法发明的时候，这个数字大概在百亿和千亿之间，但之后一只在暴增。
因此N^2的值 应该远远大于 10^20 - 没人能够负担得起这么多内存和时间 来 执行这种运算，
所以我们需要更好的算法。

幸好，这里的矩阵通常是稀疏的(thin), 也就是说，其中大多数项都是0.
在Google的应用中，每一行的非零项的数量是一个比较小的常数：
每个网页中指向其他网页的链接数量其实都非常少（相比于互联网的总网页数量来说）

因此，我们可以将这个矩阵 表示为 由稀疏向量所组成的一个数组，使用HashST的稀疏向量的具体实现 如下所示。
SparseVector

这个符号表的用例 实现了 稀疏向量的主要功能，并且高效地完成了 点乘操作。
我们将 一个向量中的每一项 和 另一个向量中对应项 相乘，并将所有结果相加，
所需的乘法操作数量 等于 稀疏向量中的所有非零项的数目。

这里我们不再使用 a[i][j] 来访问 矩阵中第i行第j列的元素，
而是使用 a[i].put(j, val) 来 表示矩阵中的值，并
使用a[i].get(j) 来 获取它。

从下面这段代码中可以看到，用这种方式实现的矩阵，
比起 使用二维数组实现的矩阵 而言，其与向量的乘法 更简单（也能 更清晰地描述乘法地过程）

更重要地是，它需要的时间 仅仅和 N加上矩阵中的非零元素的数量 成正比。

虽然对于较小 或者 不那么稀疏的矩阵，使用符号表的代价 可能会非常高昂，
但你应该理解它对于 举行稀疏矩阵的意义。
为了更好地说明这一点，设想一个超大的应用，N可能会超过100亿或者1000亿，
而平均每行中的非零元素小于10个。
对于这种应用，使用符号表 能够 将矩阵与向量的乘法的速度 提升10亿倍，甚至更多。
这种应用虽然简单，但是重要，不愿意挖掘其中省时省力的潜力的程序员 解决实际问题的能力的潜力
也必然是有限的，能够将运行速度提升几十亿倍的程序员 勇于面对 看似无法解决的问题。

构造Google所使用的矩阵是一种图的应用（当然也是符号表的一种应用），尽管是一个巨型的稀疏矩阵。
有了这个矩阵，PageRank算法的计算 就变成了 简单的矩阵与向量之间的乘法运算 -
不断用结果向量 来 取代计算所使用的向量，重复这个迭代过程 直到收敛（这一点是由概率论的基础定理保证的）

因此，使用一个类似于SparseVector的类 能够将这种应用程序 所需要的空间和时间
改进几百或者几千亿倍，甚至更多。

在许多科学计算种，类似的改进都是可能的，因此
稀疏向量 和 矩阵的应用十分广泛，并且 一般都会被集成到 科学计算专用的库中。
在处理庞大的向量或者矩阵的时候，你最好 用一些简单的性能测试 来 保证不会错过类似的改进机会。

另外，大多数编程语言 都拥有 处理原始数据类型数组的能力，因此
像例子中那样 使用数组 来 保存密集的向量 也许能够提供更好的性能。
对于这些应用，有必要深入了解它们的运行瓶颈，从而选择合适的数据类型实现。

符号表之所以是 “算法技术” 为现代计算机基础设施建设 做出的重要贡献，
原因在于 在很多实际应用中，它都能够节约 大量的运行成本 - 使得各个领域中，许多
原本完全无法想象的问题的解决 成为了可能。

科学或是工程领域 能够将运行效率提升一千亿倍的发明非常少————我们已经在几个例子中看到，
符号表做到了，并且这些改进的影响非常深远。

但是我们学习过的数据结构和算法的演化并没有结束：
它们才出现了几十年，我们也并没有完全了解它们的性质。

鉴于它们的重要性，符号表的各种实现仍然是 全球学者的研究热点。
随着它的应用范围不断扩展，我们会在更多领域它的新发展。
