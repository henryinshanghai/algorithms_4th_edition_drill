字典的特征： 每个键 都有一个与之关联的值；
应用：可以使用 符号表数据类型来实现它，因为 符号表 使用关联型抽象数组 来 为每一个键都指定一个值。

每个账号 都唯一地表示一个客户，每个条码 都唯一地表示一种商品...

但一般来说，一个给定的键 有可能会 与多个值相关联。
比如 在 amino.csv例子中，每个密码子都只对应着一种氨基酸，但是一种氨基酸 却可能对应着 多个密码子。
aka 氨基酸 <-> 它所对应的多个密码子。

概念：用“索引”一词 来描述 其一个键 与多个值相关联的符号表。
aka 索引 是一种符号表。

商业交易：公司想要使用客户账户 来 跟踪其一天内所有交易。
手段：为当日所有的交易 来 建立一个索引。其中键是客户的账号，而值是 与此账号相关联的所有交易

网络搜索：当你输入一个关键字，并得到一系列包含有此关键字的网站时。
你就在使用 网络搜索引擎 所创建的索引。
键是你输入的关键字，值是 包含此关键字的一组网页。
🐖 实际的情况会更加复杂，因此我们通常会指定多个关键字。

电影和演员：本书网站上的 movies.txt来自于IMBD（互联网电影数据库）。
其中每一行都含有 一部电影的名称（作为键），然后是 在其中出演的演员列表（作为值），用斜杠分隔。

手段：把当前键 所关联的所有值都放在一个数据结构中（比如queue），
然后使用这个数据结构作为键所对应的值，就能够 轻松构造一个索引。

根据上述手段 来 扩展LookupCSV很简单（留作练习）。

===
LookupIndex
作用：从一个文件（比如 amino.txt或者movies.txt）中创建出一个索引。
🐖 分隔符不一定要是逗号，但是需要 支持从命令行参数来指定它
用法：构造完成后，LookupIndex就能够 接受查询，并打印出 键所关联的所有值。

更有意思的是，LookupIndex 还会为每个文件 创建一个反向索引。
也就是把索引的键、值互换。
在氨基酸的例子中，它的功能相当于 LookupCSV（找到给定密码子所对应的氨基酸）
在电影的例子中，它能够 找到一个演员出演过的所有电影。
🐖 这项信息隐藏于数据之中，如果没有符号表的话，我们很难直观地获取到它。

请仔细研究这个例子，因为它深刻地揭示了 符号表的本质特征。

===
典型的索引类别应用（符号表）

基因组学 氨基酸（键） 一系列的密码子（值）
商业交易 账号（键） 一系列交易（值）
网络搜索 关键字（键）一系列网页（值）
IMDB 电影名（键） 一系列演员（值）

🐖 amino.csv 以及 movies-hero.txt 这样的文件 就叫做 ”索引文件“/”索引数据库“。

===
反向索引
是：一个操作；
作用：用于 通过值 来 反向查询到 值所关联的键；
应用场景：查询某个值具体在哪些地方出现过（occurrence）
特征：#1 这是符号表的另外一种典型用例; #2 它会进行一系列get()与put()操作的混合调用。
实现手段：把键 与 一个SET类型的值 关联起来，而这个值中 包含了 该键出现的所有位置。
🐖 位置信息具体的性质与用途 取决于 具体的应用场景：
在一本书中，位置 可以是 书的页码；
在一段程序中，位置 可能是 代码的行号；
在基因组中，位置 可能是 一段基因序列的某个位点 等等

#1 互联网电影数据库(IMDB).
在上文的例子中，输入是 将每部电影 与 它的演员 关联起来的一个索引。
它的反向索引 则会 把每个演员 与 他所出演过的所有电影 相关联。

#2 图书索引
每本教科书都有一个索引 - 你能在其中找到一个术语 及 它所出现过的所有页码。
创建有些的索引 需要作者的努力 来 去掉常见和无关的词语，
但是文档处理系统 能够 使用符号表 来 将整个过程自动化。

一种有趣的特殊情况 叫做 对照索引（concordance）, 它会给出 单词在树中出现过的所有位置。

#3 编译器
在一个 使用了很多符号的庞大程序中，能够知道 每个名称的使用位置 会非常有帮助。
在以前，一张打印 用来 追踪各个符号在程序中使用位置 的符号表 曾经是程序员 最重要的工具之一。
在现代计算机系统中，符号表 是程序员 用来管理各种名称的工具软件 的基础。

#4 文件搜索

现代操作系统中，都提供了 根据关键字来搜索文件的功能。
键是关键字，值是 包含有该关键字的所有文件的集合。

#5 基因组学

基因组学研究中的一个典型情况是 科学家希望知道 一个给定的核苷酸序列 在一个基因或者一组基因中的位置。
某些特定序列 或者 近似序列的存在 也许都有重大的意义。
这种研究 首先就需要一个 序列和基因的对照索引，但是也需要一些修改，
因为 基因是无法像句子一样被切分成单词的。

常见的 反向索引用例的符号表中 键值的情况如下👇
领域  键   值
IMDB 演员  一系列电影
图书  术语  一系列页码
编译器 标识符 一系列使用位置
文件搜索  关键字   文件集合
基因组学    基因片段    一系列位置

索引（以及反向索引）用法之查找：LookupIndex

这段数据驱动的符号表用例 会 从一个文件（索引数据库）中读取键值对，并
根据标准输入中的键 打印出 相应的值。
其中键为字符串，值为一系列字符串，分隔符有命令行参数提供。

===
下面的FileIndex
作用：把 文件中的任意一个单词 和 由包含有这个单词的所有文件所构成的SET对象 关联起来；
原理：使用一个符号表 来 构造/建立一个反向索引。
用法：
    #1 从命令行接受多个文件名；
    #2 在接收标准输入input 作为待查询的key时，它会输出 单词所对应的文件列表。
🐖 这个过程 与 工具软件（Everything） 在网络上 或者 在你的计算机上查找信息的过程类似，即
根据 输入的关键字 来 得到所有”该关键字出现过的位置“。

这类工具的开发者一般会在以下几点上来改进这个过程：
#1 查询形式；
#2 被索引的文件或网页 的集合；
#3 文件或网页 在结果中的排列顺序。

例如，你肯定已经习惯了 在网络搜索引擎的查询框中，输入多个关键字进行查找，
进而得到一组 按照相关性或者重要性 由高到低排列的结果。
🐖 搜索引擎的工作原理 其实就是 把网络上的大部分页面 进行索引。

本节最后的练习中讨论了 这里的一些改进。
我们会在 以后学习 和网络搜索有关的各种算法，但是符号表 仍旧会是 整个过程的核心工具。

和 LookupIndex一样，你也应该从本书的网站上 下载FileIndex，并使用它 来为你的电脑上的一些文件
或者是 你感兴趣的一些网站 建立索引 - 从而更好地 理解符号表的使用方法。

你将会发现 即使是根据巨型文件 来 构造庞大的索引，这个工具的耗时也不多。
因为每个put()操作 和 get()请求的处理 都会非常地快。
”确保 巨型的动态索引 能够实现即时响应“ 是算法技术的重要胜利之一。

代码参考： FileIndex

这段符号表用例 能够 为一组文件创建索引。
我们 将每个文件中的每个单词 都记录在符号表中，并维护一个SET对象 来 保存出现过该单词的文件。
In对象 接收的名称 可以是网页 - 因此这段代码 也能够 为一组网页来创建反向索引。

关键字 -> 一组网页
网页 -> 网页中的关键字
