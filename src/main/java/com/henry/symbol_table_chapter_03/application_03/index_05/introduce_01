字典的特征：对于每个键，都有一个与之关联的值；
应用：可以使用 符号表数据类型来实现它，因为 符号表 使用关联型抽象数组 来 为每一个键都指定一个值。

每个账号 都唯一地表示一个客户，每个条码 都唯一地表示一种商品...

但一般来说，一个给定的键 有可能会 与多个值相关联。
比如 在 amino.csv例子中，每个密码子 都只对应着 一种氨基酸，但是一种氨基酸 却可能对应着 多个密码子。
aka 氨基酸 <-> 它所对应的多个密码子。

概念：用“索引”一词 来描述 ”其中一个键 与多个值相关联“的符号表。
aka 索引 是一种符号表。

商业交易：公司想要 使用客户账户 来 跟踪其 一天内所有交易。
手段：为 当日所有的交易 来 建立一个索引。其中键 是 客户的账号，而 值 是 与此账号相关联的所有交易；

网络搜索：当 你输入一个关键字，并点击搜索 来 得到一系列 包含有此关键字的网站 时。
你就在使用 由网络搜索引擎 所创建的索引（一个关键字 -> 多个网页的映射）。
键是 你输入的关键字，值是 包含此关键字的 一组网页。
🐖 实际的情况 会更加复杂，因此我们 通常会指定 多个关键字。

电影和演员：本书网站上的 movies.txt来自于IMBD（互联网电影数据库）。
其中每一行都含有 一部电影的名称（作为键），然后是 在其中出演的演员列表（作为值），用斜杠分隔。

手段：把 当前键所关联的所有值 都放在 单一的一个数据结构中（比如queue），
然后 使用这个数据结构 作为 键所对应的值，就能够 轻松构造出一个索引。

根据上述手段 来 扩展LookupCSV很简单（留作练习）。

===
LookupIndex
作用：从 一个文件（比如 amino.txt或者movies.txt）中 创建出一个索引。
🐖 分隔符 不一定要是 逗号，但是需要支持 能够从 命令行参数 来指定它
用法：构造完成后，LookupIndex就能够 接受查询，并 打印出 键所关联的所有值。

更有意思的是，LookupIndex 还会 为 每个文件 创建一个”反向索引“（也就是把索引的键、值互换）。
在 氨基酸的例子 中，它的功能 相当于 LookupCSV（找到 给定密码子所对应的氨基酸）
在 电影的例子 中，它能够 找到 一个演员所出演过的所有电影。
🐖 这项信息 隐藏于 数据之中，如果 没有符号表 的话，我们很难 直观地获取到它。

请仔细研究 这个例子，因为它 深刻地揭示了 符号表的本质特征。

===
典型的索引类别应用（符号表）

基因组学 氨基酸（键） 一系列的密码子（值）
商业交易 账号（键） 一系列交易（值）
网络搜索 关键字（键）一系列网页（值）
IMDB 电影名（键） 一系列演员（值）

🐖 amino.csv 以及 movies-hero.txt 这样的文件 就叫做 ”索引文件“/”索引数据库“。

===
反向索引
是：一个操作；
作用：用于 通过值 来 反向查询到 与其相关联的具体键；
应用场景：查询 某个值 具体在 哪些地方 出现过（occurrence）
特征：
    #1 这是符号表的 另外一种 典型用例;
    #2 它 会进行 一系列get()与put()操作的混合调用。
实现手段：把 键 与 一个SET类型的值 关联起来，而这个值中 包含了 该键出现过的所有位置。
🐖 位置信息 具体的性质与用途 取决于 具体的应用场景：
在一本书中，位置 可以是 书的页码；
在一段程序中，位置 可能是 代码的行号；
在基因组中，位置 可能是 一段基因序列的某个位点 等等

#1 互联网电影数据库(IMDB).
在 上文的例子 中，输入是 把 每部电影 与 参演它的所有演员 关联起来的一个索引。
它的反向索引 则会 把 每个演员 与 他所出演过的所有电影 相关联。

#2 图书索引
每本教科书都 有一个索引 - 你能在其中找到 一个术语 及 它所出现过的所有页码。
创建有效的索引 需要 作者的努力 来 去掉 常见和无关的词语，
但是 文档处理系统 能够 使用符号表 来 将整个过程自动化。

一种有趣的特殊情况 叫做 对照索引（concordance）, 它会给出 单词 在树中出现过的所有位置。

#3 编译器
在一个 ”使用了很多符号的“庞大程序中，能够知道 每个名称的使用位置 会非常有帮助。
在以前，一张打印 用来 追踪各个符号在”程序中使用位置“ 的符号表 曾经是程序员 最重要的工具之一。
在 现代计算机系统 中，符号表 是程序员 用来管理各种名称的工具软件 的基础。

#4 文件搜索

现代操作系统 中，都提供了 根据关键字 来 搜索文件的功能。
键 是 关键字，值是 包含有该关键字的 所有文件的集合。

#5 基因组学

基因组学研究 中的一个典型情况是 科学家希望知道 一个给定的核苷酸序列 在一个基因或者一组基因中 的具体位置。
某些特定序列 或者 近似序列的存在 也许都有重大的意义。
这种研究 首先就需要一个 序列和基因的对照索引，但是也需要一些修改，
因为 基因是无法 像句子一样 被切分成单词的。

常见的 反向索引用例的符号表中 键值的情况如下👇
领域  键   值
IMDB 演员  一系列电影
图书  术语  一系列页码
编译器 标识符 一系列使用位置
文件搜索  关键字   文件集合
基因组学    基因片段    一系列位置

索引（以及反向索引）用法之查找：LookupIndex

这段 数据驱动的符号表用例 会：
① 从一个文件（索引数据库）中 读取键值对，并
② 根据 标准输入中的键 来 打印出 相应的值。
    其中 键为 字符串，值为 一系列字符串，分隔符 有命令行参数提供。

===
下面的FileIndex
作用：把 文件中的任意一个单词 和 由”包含有这个单词的所有文件“所构成的SET对象 关联起来；
原理：使用一个符号表 来 构造/建立一个反向索引。
用法：
    #1 从命令行中，接收 多个文件名；
    #2 在 接收标准输入input 作为 待查询的key 时，它 会输出 单词所对应的文件列表。
🐖 这个过程 与 ”工具软件（比如Everything） 在网络上 或者 在你的计算机上 查找信息“的过程 类似，即
根据 输入的关键字 来 得到所有”该关键字出现过的位置“。

这类工具的开发者 一般会 在以下几点上 来 改进这个过程：
#1 查询形式；
#2 被索引的文件或网页 的集合；
#3 文件或网页 在结果中的排列顺序。

例如，你肯定已经习惯了 在 网络搜索引擎的查询框 中，输入多个关键字 进行查找，
进而得到一组 ”按照相关性或者重要性 由高到低排列“的结果集合。
🐖 搜索引擎的工作原理 其实就是 把 网络上的大部分页面 进行索引。

本节最后的练习中讨论了 这里的一些改进。
我们会在 以后学习 ”和网络搜索有关“的各种算法，但是 符号表 仍旧会是 整个过程的核心工具。

和 LookupIndex一样，你也应该 从本书的网站上 下载FileIndex，并 使用它 来
为 你的电脑上的一些文件 或者是 你感兴趣的一些网站 建立索引 - 从而更好地 理解符号表的使用方法。

你将会发现 即使是 根据巨型文件 来 构造庞大的索引，这个工具的耗时 也不多。
因为 每个put()操作 和 get()请求的处理 都会非常地快。
”确保 巨型的动态索引 能够实现即时响应“ 是 算法技术的重要胜利之一。

代码参考： FileIndex

这段符号表用例 能够 为一组文件创建索引。
我们 把 每个文件中的每个单词 都记录在符号表中，并 维护一个SET对象 来 保存”出现过该单词的文件“。
In对象 所接收的名称 可以是网页 - 因此这段代码 也能够 为 一组网页 来 创建反向索引。

关键字 -> 一组网页
网页 -> 网页中的关键字
