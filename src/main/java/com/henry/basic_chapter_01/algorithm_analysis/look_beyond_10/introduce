良好的性能是非常重要的。速度极慢的程序 和 不正确的程序一样无用，因此
显然有必要 在一开始就 关注程序的运行成本，这能够 让你大致估计出 所需要解决的问题的规模，
而聪明的做法是 时刻关注程序中的内循环代码的组成。

但在编程领域，最常见的错误 或许就是 过于关注程序的性能。
你的首要任务应该是 写出清晰正确的代码。
仅仅为了提高速度而修改程序的事 最好留给专家们来做。
事实上，这么做通常会降低生产效率，因为它会产生 复杂而且难以理解的代码。
CAR. Hoare（快速排序的发明人，也是以为推动 编写清晰而正确的代码的领军任务）曾将把这种想法总结为：
不成熟的优化 是所有罪恶之源。
Knuth为这句话添加了一个定语： 在编程领域中。
另外，如果降低成本所带来的效益并不明显，那么对运行时间的改进 就不太值得了。
比如，如果一个程序所需要的运行时长 只是一瞬间而已，那么：即使它的速度提高十倍，也是无关紧要的。
即使程序的运行时长会需要好几分钟，实现并调试一个新算法所需要的时间 也可能会 大大超过 直接运行一个稍慢一些的算法 —— 这种时候，就应该让计算机代劳。
更糟糕的情况是，你可能花了 大量的时间和心血 去实现一个理论上能够改进程序的想法，但 实际上什么也没有发生。

在编程领域中，第二个常见的错误或许是 完全忽略了程序的性能。
较快的算法 一般都比 暴力算法 更加复杂，所以很多人 宁可使用较慢的原发 也不愿应付复杂的代码。
但是，几行优秀的代码有时候会 给你带来巨大的收益。
许多人在使用平方级别的暴力算法去解决问题的盲目等待中浪费了大量的时间，但实际上
线性级别 或者 线性对数级别的算法 能够 在几分之一的时间内完成任务。
当我们需要大规模处理问题的时候，通常，除了寻找更好的算法之外，我们别无选择。

我们将使用本节所述的各种方法 来 评估算法对内存的使用，并在多个成本模型下 对算法进行数学分析 从而得到相应的近似函数，
然后根据近似函数 来 提出对算法所需的运行时长的增长数量级的猜想，并通过实验来验证它们。

改进程序，使之更加清晰、高效和优雅，应该是我们一贯的目标。
如果你在开发一个程序的全过程中，都能够 关注它的运行成本，那么 你会从 该程序的每次执行中 获益。