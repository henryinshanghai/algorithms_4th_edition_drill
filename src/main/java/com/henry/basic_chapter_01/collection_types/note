集合数据类型；
作用：用于存储 多个某一类型元素；
特征：集合类型一般都会支持 对于元素的增删改查操作；

待验证的结论#1：我们对集合中对象的表示方式 会 直接影响到各种操作的效率；
待学习的概念：泛型、迭代；
待验证的结论#2：链式数据结构 的重要性 - “链表”数据结构是 高效实现 背包、队列、栈的基础。



---
泛型：
是：一个占位符；
作用：用于表示 当前数据结构 所能处理的元素类型；
特征：#1 Java的语法中，泛型也叫做“类型化参数”； #2 泛型的实际值必须是 “引用类型”；
用法：用例代码 在使用数据结构时，使用 实际的引用数据类型 来 替换泛型。

---
可迭代的集合类型

是：集合类型的一种特性；
作用：支持用例 对集合类型中的元素 进行迭代访问（一个个地访问）；
特征：#1 这是Java中的一级语言特性（优于库）； #2 这种访问模式使得 用例可以不关心集合具体的实现方式；

---
集合数据类型之背包

作用：用于收集 多个某种类型的元素；
特征：#1 支持 迭代访问元素的操作; #2 元素被迭代的顺序 不确定;
应用：由于特征#2，因此 用例可以使用Bag 来 声明 “元素的处理顺序是不重要的”；
用例：计算标准输入中 所有double值的平均值 和 样本标准差。

---
集合数据类型之 “先进先出队列”

特征：#1 使用foreach语句来迭代访问集合中的元素时，“元素的处理顺序” 就是 “元素被添加到队列中的顺序”；
应用：在保存元素的同时，保存元素之间的相对顺序；- 使入列顺序与出列顺序相同
用法：#1 从标准输入中读取元素，添加到队列中；#2 从队列中出队元素以供使用 - 这样使用元素的顺序 与 标准输入中元素的顺序会一样

---
集合数据类型之 “下压栈”

特征：#1 使用foreach语法 来 迭代访问集合中的元素的时候，元素的处理顺序 与 “元素被添加到栈时的顺序” 刚好相反。
应用：在保存元素的同时，颠倒元素的相对顺序；
用法实例：算术表达式求值；

